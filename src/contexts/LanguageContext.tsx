import { createContext, useContext, useState, ReactNode } from 'react';

export type Language = 'ja' | 'en';

interface Translations {
  ja: Record<string, string>;
  en: Record<string, string>;
}

const translations: Translations = {
  ja: {

    // Header
    'app.title': 'tarutaru',
    'header.toggleTheme': 'テーマを切り替え',
    
    // Main page
    'main.title': 'tarutaru',
    'main.subtitle': 'nandemo tools',
    
    // Categories
    'category.all': 'すべて',
    'category.text': 'テキスト処理',
    'category.development': '開発者ツール',
    'category.data': 'データ変換',
    'category.generator': '生成ツール',
    'category.utility': 'ユーティリティ',
    
    // Tools
    'tool.characterCount.name': '文字数カウント',
    'tool.characterCount.description': 'テキストの文字数をリアルタイムで表示',
    'tool.textConverter.name': '全角・半角変換',
    'tool.textConverter.description': '数字、英字、カタカナを個別に変換',
    'tool.randomGenerator.name': 'ランダム文字列生成',
    'tool.randomGenerator.description': '桁数や文字種を指定して生成',
    'tool.jsonFormatter.name': 'JSONフォーマッタ',
    'tool.jsonFormatter.description': 'JSONを整形して見やすく表示',
    'tool.qrGenerator.name': 'QRコード生成',
    'tool.qrGenerator.description': 'テキストからQRコードを生成',
    'tool.jwtViewer.name': 'JWT Viewer',
    'tool.jwtViewer.description': 'JWTトークンをデコードして表示',
    'tool.baseConverter.name': 'Base64/58変換',
    'tool.baseConverter.description': 'Base64、Base64URL、Base58の変換',
    'tool.hashGenerator.name': 'ハッシュ生成',
    'tool.hashGenerator.description': 'MD5、SHA-1、SHA-256ハッシュ生成',
    'tool.uuidGenerator.name': 'UUID生成',
    'tool.uuidGenerator.description': 'UUID v4/v1を生成',
    'tool.radixConverter.name': '進数変換',
    'tool.radixConverter.description': '2進数、8進数、16進数などの相互変換',
    'tool.markdownConverter.name': 'Markdown変換',
    'tool.markdownConverter.description': 'Markdown ⇔ HTML 相互変換',
    'tool.textSorter.name': 'テキストソート',
    'tool.textSorter.description': '行単位でのソート・重複削除・シャッフル',
    'tool.codeHighlighter.name': 'コードハイライト',
    'tool.codeHighlighter.description': '自動言語検出とシンタックスハイライト',
    'tool.asciiArtGenerator.name': 'アスキーアート',
    'tool.asciiArtGenerator.description': '2ちゃんねる風AAをランダム生成',
    'tool.yamlJsonConverter.name': 'YAML/JSON変換',
    'tool.yamlJsonConverter.description': 'YAML ⇔ JSON 相互変換',
    'tool.jqExplorer.name': 'jqエクスプローラー',
    'tool.jqExplorer.description': 'JSON探索でjqクエリを自動生成',
    'tool.certificateViewer.name': '証明書ビューア (工事中)',
    'tool.certificateViewer.description': 'X.509証明書の詳細情報を表示',
    'tool.colorPreview.name': 'カラープレビュー',
    'tool.colorPreview.description': 'RGB/HEX色コードのプレビューと変換',
    'tool.datetimeFormatter.name': '日付/時刻フォーマッタ',
    'tool.datetimeFormatter.description': 'Unix Time ⇔ ISO8601 ⇔ ローカル時刻の相互変換',
    'tool.cronParser.name': 'Cron式パーサー',
    'tool.cronParser.description': 'Cron式の解析と次回実行日時の表示',
    'tool.curlConverter.name': 'curl変換ツール',
    'tool.curlConverter.description': 'curlコマンド ⇔ HTTPリクエストの相互変換',
    // CurlConverter translations
    'curlConverter.mode.label': '変換方向',
    'curlConverter.mode.curlToHttp': 'curl → HTTP',
    'curlConverter.mode.httpToCurl': 'HTTP → curl',
    'curlConverter.curl.input.label': 'curlコマンドを入力',
    'curlConverter.curl.input.placeholder': 'curl -X POST https://api.example.com/users -H \'Content-Type: application/json\' -d \'{...}\'',
    'curlConverter.http.method.label': 'メソッド',
    'curlConverter.http.url.label': 'URL',
    'curlConverter.http.url.placeholder': 'https://api.example.com/users',
    'curlConverter.http.headers.label': 'ヘッダー（1行に1つ）',
    'curlConverter.http.headers.placeholder': 'Content-Type: application/json\nAuthorization: Bearer token123',
    'curlConverter.http.body.label': 'リクエストボディ',
    'curlConverter.http.body.placeholder': '{"name": "John Doe", "email": "john@example.com"}',
    'curlConverter.result.httpRequest': 'HTTPリクエスト',
    'curlConverter.result.curlCommand': 'curlコマンド',
    'curlConverter.insertSample': 'サンプル挿入',
    'curlConverter.reset': 'リセット',
    'curlConverter.copy': 'コピー',
    'curlConverter.copied': 'コピー済み',
    'curlConverter.error.conversion': '変換エラーが発生しました',
    'curlConverter.historyOutput.curlToHttp': 'curl→HTTP変換完了: {method} {url}',
    'curlConverter.historyOutput.httpToCurl': 'HTTP→curl変換完了',
    'tool.htmlEscaper.name': 'HTMLエスケーパー',
    'tool.htmlEscaper.description': 'HTMLエスケープ・アンエスケープ処理',
    'tool.jsonLogViewer.name': 'JSONログビューア',
    'tool.jsonLogViewer.description': 'JSONログの整形・フィルタ・検索機能',
    // JsonLogViewer translations
    'jsonLogViewer.settings.title': '表示設定',
    'jsonLogViewer.settings.timestamp': 'タイムスタンプ',
    'jsonLogViewer.settings.level': 'レベル',
    'jsonLogViewer.settings.message': 'メッセージ',
    'jsonLogViewer.settings.showRaw': '生ログ表示',
    'jsonLogViewer.filter.level': 'ログレベル',
    'jsonLogViewer.filter.all': '全レベル',
    'jsonLogViewer.filter.error': 'エラー',
    'jsonLogViewer.filter.warn': '警告',
    'jsonLogViewer.filter.info': '情報',
    'jsonLogViewer.filter.debug': 'デバッグ',
    'jsonLogViewer.filter.trace': 'トレース',
    'jsonLogViewer.search.label': '検索',
    'jsonLogViewer.search.placeholder': 'メッセージ検索...',
    'jsonLogViewer.maxLines': '最大行数',
    'jsonLogViewer.stats.title': '統計情報',
    'jsonLogViewer.stats.totalLines': '総行数:',
    'jsonLogViewer.stats.showing': '表示中:',
    'jsonLogViewer.input.label': 'JSONログを入力（1行に1つのJSONオブジェクト）',
    'jsonLogViewer.input.placeholder': '{"timestamp":"2023-12-20T09:15:23.456Z","level":"info","message":"Application started"}\n{"timestamp":"2023-12-20T09:16:30.234Z","level":"error","message":"Database connection failed"}',
    'jsonLogViewer.results.title': '解析結果 ({count}件)',
    'jsonLogViewer.export': 'エクスポート',
    'jsonLogViewer.showRawLog': '生ログを表示',
    'jsonLogViewer.insertSample': 'サンプル挿入',
    'jsonLogViewer.reset': 'リセット',
    'jsonLogViewer.copy': 'コピー',
    'jsonLogViewer.copied': 'コピー済み',
    'jsonLogViewer.error.parsing': 'ログの解析中にエラーが発生しました',
    'jsonLogViewer.historyInput': '{count}行のログ',
    'jsonLogViewer.historyOutput': '解析完了: {errors}エラー, {warnings}警告',
    'tool.caseConverter.name': 'ケース変換',
    'tool.caseConverter.description': 'snake_case ⇔ camelCase ⇔ kebab-case 相互変換',
    'tool.curlToCode.name': 'curl→コード変換',
    'tool.curlToCode.description': 'curlコマンドを各種プログラミング言語に変換',
    
    // CaseConverter translations
    'caseConverter.input.label': '変換したいテキストを入力',
    'caseConverter.input.placeholder': 'user_profile_data または getUserProfileData など',
    'caseConverter.detected': '検出されたケース:',
    'caseConverter.mixed': '混合/不明',
    'caseConverter.results': '変換結果',
    'caseConverter.examples.title': '使用例',
    'caseConverter.examples.programming': 'プログラミング',
    'caseConverter.examples.web': 'Web開発',
    'caseConverter.patterns.title': 'よく使われる変換パターン',
    'caseConverter.sample': 'ランダムサンプル',
    'caseConverter.reset': 'リセット',
    'caseConverter.case.snake_case': '変数名でよく使用 (Python, Ruby等)',
    'caseConverter.case.camelCase': 'JavaScript, Java等の変数名',
    'caseConverter.case.PascalCase': 'クラス名, コンストラクタ名',
    'caseConverter.case.kebab-case': 'CSS, HTML属性, URL等',
    'caseConverter.case.SCREAMING_SNAKE_CASE': '定数名でよく使用',
    'caseConverter.case.Title Case': '見出し, タイトル用',
    'caseConverter.case.lowercase': '全て小文字',
    'caseConverter.case.UPPERCASE': '全て大文字',
    
    // CurlToCode translations
    'curlToCode.input.label': 'curlコマンドを入力',
    'curlToCode.input.placeholder': 'curl -X POST https://api.example.com/users -H "Content-Type: application/json" -d \'{"name": "John"}\'',
    'curlToCode.parseError': '解析エラー',
    'curlToCode.parseSuccess': '解析成功',
    'curlToCode.results': '変換結果',
    'curlToCode.examples.title': 'サンプルcurlコマンド',
    'curlToCode.examples.get': 'GET リクエスト',
    'curlToCode.examples.post': 'POST リクエスト (JSON)',
    'curlToCode.examples.auth': '認証付きリクエスト',
    'curlToCode.examples.headers': 'カスタムヘッダー',
    'curlToCode.examples.form': 'フォームデータ',
    'curlToCode.examples.file': 'ファイルアップロード',
    'curlToCode.sample': 'サンプル挿入',
    'curlToCode.clear': 'クリア',
    'curlToCode.copy': 'コピー',
    'curlToCode.selectLanguage': '出力言語を選択',
    'curlToCode.code': 'コード',
    'curlToCode.execution': '実行方法',
    
    // JWTViewer translations
    'jwtViewer.title': 'JWT Viewer',
    'jwtViewer.insertSample': 'サンプル挿入',
    'jwtViewer.input.label': 'JWT文字列を入力',
    'jwtViewer.error.title': 'JWTエラー',
    'jwtViewer.error.invalidFormat': 'JWTは3つの部分（ヘッダー、ペイロード、シグネチャ）から構成される必要があります',
    'jwtViewer.error.decodeFailed': 'JWTの解析に失敗しました',
    'jwtViewer.error.invalidBase64': 'Invalid base64url encoding',
    'jwtViewer.status.noExpiration': '期限情報なし',
    'jwtViewer.status.expired': '期限切れ（{seconds}秒前）',
    'jwtViewer.status.expiring': 'まもなく期限切れ（{seconds}秒後）',
    'jwtViewer.status.valid': '有効（{hours}時間後に期限切れ）',
    'jwtViewer.header.title': 'ヘッダー (Header)',
    'jwtViewer.payload.title': 'ペイロード (Payload)',
    'jwtViewer.signature.title': 'シグネチャ (Signature)',
    'jwtViewer.algorithm': 'アルゴリズム',
    'jwtViewer.type': 'タイプ',
    'jwtViewer.keyId': 'キーID',
    'jwtViewer.claims.title': '標準クレーム',
    'jwtViewer.claims.issuer': '発行者 (iss)',
    'jwtViewer.claims.subject': '主体 (sub)',
    'jwtViewer.claims.audience': '対象者 (aud)',
    'jwtViewer.claims.expiration': '期限 (exp)',
    'jwtViewer.claims.notBefore': '有効開始 (nbf)',
    'jwtViewer.claims.issuedAt': '発行時刻 (iat)',
    'jwtViewer.claims.jwtId': 'JWT ID (jti)',
    'jwtViewer.signature.warning': 'このツールはJWTの構造を表示するだけで、シグネチャの検証は行いません。セキュリティが重要な場合は、適切な検証ライブラリを使用してください。',
    'jwtViewer.usage.title': '使用方法',
    'jwtViewer.usage.step1': 'JWT（JSON Web Token）文字列を上のテキストエリアに貼り付けてください',
    'jwtViewer.usage.step2': 'ヘッダーとペイロードが自動的にデコードされ、見やすい形式で表示されます',
    'jwtViewer.usage.step3': '期限（exp）がある場合、有効性がチェックされます',
    'jwtViewer.usage.step4': 'このツールは表示専用で、シグネチャの検証は行いません',
    'jwtViewer.historyOutput': 'JWT解析完了',
    
    // TextSorter translations
    'textSorter.input.label': 'ソートするテキスト（1行に1項目）',
    'textSorter.input.placeholder': 'ソートしたい項目を1行ずつ入力してください...',
    'textSorter.insertSample': 'サンプル挿入',
    'textSorter.sortMethod': 'ソート方法',
    'textSorter.sortOrder': 'ソート順序',
    'textSorter.mode.alphabetical': 'アルファベット順',
    'textSorter.mode.numerical': '数値順',
    'textSorter.mode.length': '文字数順',
    'textSorter.mode.random': 'ランダム',
    'textSorter.order.asc': '昇順（A→Z, 小→大, 短→長）',
    'textSorter.order.desc': '降順（Z→A, 大→小, 長→短）',
    'textSorter.caseSensitive': '大文字小文字を区別する',
    'textSorter.removeDuplicates': '重複を削除',
    'textSorter.removeEmpty': '空行を削除',
    'textSorter.execute': 'ソート実行',
    'textSorter.result': 'ソート結果',
    'textSorter.reverse': '順序を逆転',
    'textSorter.stats.inputLines': '入力行数',
    'textSorter.stats.outputLines': '出力行数',
    'textSorter.stats.removedEmpty': '削除空行',
    'textSorter.stats.removedDuplicates': '削除重複',
    'textSorter.explanation.title': 'ソート方法の説明:',
    'textSorter.explanation.alphabetical': 'アルファベット順: 文字コード順でソート（日本語対応）',
    'textSorter.explanation.numerical': '数値順: 数値として解析してソート（文字列は0として扱われます）',
    'textSorter.explanation.length': '文字数順: 文字列の長さでソート',
    'textSorter.explanation.random': 'ランダム: ランダムな順序でシャッフル',
    'textSorter.historyInput': '{count}行',
    'textSorter.historyOutput': 'ソート完了: {mode}',
    'textSorter.order.asc.short': '（昇順）',
    'textSorter.order.desc.short': '（降順）',
    
    // QRGenerator translations
    'qrGenerator.presets': 'プリセット',
    'qrGenerator.preset.website': 'ウェブサイト',
    'qrGenerator.preset.email': 'メール',
    'qrGenerator.preset.phone': '電話',
    'qrGenerator.preset.sms': 'SMS',
    'qrGenerator.preset.wifi': 'WiFi',
    'qrGenerator.preset.vcard': 'vCard',
    'qrGenerator.input.label': 'QRコードにするテキスト',
    'qrGenerator.input.placeholder': 'URL、テキスト、連絡先情報など...',
    'qrGenerator.characterCount': '文字数: {count}',
    'qrGenerator.size': 'サイズ: {size}px',
    'qrGenerator.margin': 'マージン: {margin}',
    'qrGenerator.errorCorrection': 'エラー訂正レベル',
    'qrGenerator.errorLevel.L': 'L (~7%) - 低',
    'qrGenerator.errorLevel.M': 'M (~15%) - 中',
    'qrGenerator.errorLevel.Q': 'Q (~25%) - 高',
    'qrGenerator.errorLevel.H': 'H (~30%) - 最高',
    'qrGenerator.foregroundColor': '前景色',
    'qrGenerator.backgroundColor': '背景色',
    'qrGenerator.result': 'QRコード',
    'qrGenerator.loading': '生成中...',
    'qrGenerator.download': 'ダウンロード',
    'qrGenerator.copyImage': '画像をコピー',
    'qrGenerator.error.generateFailed': 'QRコードの生成に失敗しました',
    'qrGenerator.historyOutput': 'QRコード生成完了',
    'qrGenerator.usage.title': '使用方法',
    'qrGenerator.usage.step1': 'テキストを入力するか、プリセットを選択してください',
    'qrGenerator.usage.step2': 'QRコードが自動的に生成されます',
    'qrGenerator.usage.step3': 'サイズ、色、エラー訂正レベルをカスタマイズできます',
    'qrGenerator.usage.step4': 'ダウンロードまたはクリップボードにコピーできます',
    
    // RadixConverter translations
    'radixConverter.input.label': '入力値',
    'radixConverter.input.placeholder': '変換したい数値を入力',
    'radixConverter.inputBase.label': '入力の進数',
    'radixConverter.convert': '進数変換',
    'radixConverter.result': '変換結果',
    'radixConverter.copy': 'コピー',
    'radixConverter.availableChars': '使用可能な文字:',
    'radixConverter.error.enterValue': '値を入力してください',
    'radixConverter.error.invalidChars': '{base}進数として無効な文字が含まれています',
    'radixConverter.error.cannotConvert': '変換できない値です',
    'radixConverter.error.conversionError': '変換中にエラーが発生しました',
    'radixConverter.base.binary': '2進数 (Binary)',
    'radixConverter.base.octal': '8進数 (Octal)',
    'radixConverter.base.decimal': '10進数 (Decimal)',
    'radixConverter.base.hexadecimal': '16進数 (Hexadecimal)',
    'radixConverter.base.base32': '32進数 (Base32)',
    'radixConverter.base.base36': '36進数 (Base36)',
    'radixConverter.historyInput': '{base}進数: {value}',
    'radixConverter.historyOutput': '変換完了',

    // CharacterCount translations
    'characterCount.input.label': 'テキストを入力してください',
    'characterCount.input.placeholder': 'ここにテキストを入力...',
    'characterCount.settings': 'カウント設定',
    'characterCount.includeSpaces': '空白を含める',
    'characterCount.includeNewlines': '改行を含める',
    'characterCount.result': 'カウント結果',
    'characterCount.characters': '文字数',
    'characterCount.words': '単語数',
    'characterCount.lines': '行数',
    'characterCount.japaneseChars': '日本語文字',
    'characterCount.totalWithSpaces': '全文字数（空白・改行含む）',
    'characterCount.excludeSpaces': '空白除く',
    'characterCount.excludeNewlines': '改行除く',
    'characterCount.excludeSpacesNewlines': '空白・改行除く',
    'characterCount.copyResult': '結果をコピー',
    'characterCount.copied': 'コピー済み',
    'characterCount.reset': 'リセット',

    // JSONFormatter translations
    'jsonFormatter.indent.label': 'インデント:',
    'jsonFormatter.indent.2spaces': '2スペース',
    'jsonFormatter.indent.4spaces': '4スペース',
    'jsonFormatter.indent.tab': 'タブ',
    'jsonFormatter.compress': '圧縮',
    'jsonFormatter.insertSample': 'サンプル挿入',
    'jsonFormatter.input.label': 'JSON文字列を入力',
    'jsonFormatter.input.placeholder': '{"key": "value", "array": [1, 2, 3]}',
    'jsonFormatter.error.title': 'JSONエラー',
    'jsonFormatter.validJson': '有効なJSONです',
    'jsonFormatter.output.label': '整形されたJSON',
    'jsonFormatter.copyResult': '結果をコピー',
    'jsonFormatter.copied': 'コピー済み',
    'jsonFormatter.reset': 'リセット',
    'jsonFormatter.stats.title': 'JSON統計',
    'jsonFormatter.stats.originalSize': '元サイズ',
    'jsonFormatter.stats.formattedSize': '整形後',
    'jsonFormatter.stats.objects': 'オブジェクト',
    'jsonFormatter.stats.arrays': '配列',
    'jsonFormatter.stats.keys': 'キー数',
    'jsonFormatter.stats.strings': '文字列',
    'jsonFormatter.stats.numbers': '数値',
    'jsonFormatter.stats.booleans': '真偽値',
    'jsonFormatter.usage.title': '使用方法',
    'jsonFormatter.usage.step1': '整形したいJSON文字列を上のテキストエリアに貼り付けてください',
    'jsonFormatter.usage.step2': '構文エラーがある場合は自動的に検出してエラーを表示します',
    'jsonFormatter.usage.step3': 'インデントサイズを変更して見やすさを調整できます',
    'jsonFormatter.usage.step4': '「圧縮」ボタンで改行やスペースを削除した最小形式にできます',

    // BaseConverter translations
    'baseConverter.direction.label': '変換方向',
    'baseConverter.encode': 'エンコード',
    'baseConverter.decode': 'デコード',
    'baseConverter.format.label': '変換形式',
    'baseConverter.insertSample': 'サンプル挿入',
    'baseConverter.input.originalText': '元のテキスト',
    'baseConverter.input.encodedText': '{format}文字列',
    'baseConverter.input.decodedText': 'デコードされたテキスト',
    'baseConverter.input.placeholder.encode': 'エンコードしたいテキストを入力...',
    'baseConverter.input.placeholder.decode': '{format}文字列を入力...',
    'baseConverter.charCount': '文字数: {count}',
    'baseConverter.byteCount': 'バイト数: {count}',
    'baseConverter.error.title': '変換エラー',
    'baseConverter.copyResult': '結果をコピー',
    'baseConverter.copied': 'コピー済み',
    'baseConverter.swapInputOutput': '入出力を入れ替え',
    'baseConverter.reset': 'リセット',
    'baseConverter.formats.title': 'エンコーディング形式について',
    'baseConverter.format.base64.title': 'Base64',
    'baseConverter.format.base64.desc': '標準的なBase64エンコーディング。A-Z, a-z, 0-9, +, / の64文字を使用。パディングに = を使用。',
    'baseConverter.format.base64.example': '例: "Hello" → "SGVsbG8="',
    'baseConverter.format.base64url.title': 'Base64URL',
    'baseConverter.format.base64url.desc': 'URL安全なBase64。+ を -、/ を _ に置換し、パディング = を省略。JWT等で使用。',
    'baseConverter.format.base64url.example': '例: "Hello" → "SGVsbG8"',
    'baseConverter.format.base58.title': 'Base58',
    'baseConverter.format.base58.desc': 'Bitcoin等で使用。紛らわしい文字（0, O, I, l）を除いた58文字を使用。',
    'baseConverter.format.base58.example': '例: "Hello" → "9Ajdvzr"',
    'baseConverter.usage.title': '使用例',
    'baseConverter.usage.base64': 'メール添付ファイル、データURL、Basic認証',
    'baseConverter.usage.base64url': 'JWT、OAuth、URL安全な文字列',
    'baseConverter.usage.base58': 'Bitcoin、IPFS、短縮URL',
    'baseConverter.historyOutput.encode': '{format} エンコード完了',
    'baseConverter.historyOutput.decode': '{format} デコード完了',

    // TextConverter translations
    'textConverter.direction.label': '変換方向',
    'textConverter.halfToFull': '半角 → 全角',
    'textConverter.fullToHalf': '全角 → 半角',
    'textConverter.target.label': '変換対象',
    'textConverter.target.all': 'すべて',
    'textConverter.target.numbers': '数字のみ',
    'textConverter.target.alphabet': '英字のみ',
    'textConverter.target.katakana': 'カタカナのみ',
    'textConverter.input.label': '変換前テキスト',
    'textConverter.input.placeholder': '変換したいテキストを入力...',
    'textConverter.output.label': '変換後テキスト',
    'textConverter.copyResult': '結果をコピー',
    'textConverter.copied': 'コピー済み',
    'textConverter.reset': 'リセット',
    'textConverter.examples.title': '変換例',
    'textConverter.examples.numbers': '数字: １２３４５ ⇔ 12345',
    'textConverter.examples.alphabet': '英字: ＡＢＣＤＥ ⇔ ABCDE',
    'textConverter.examples.katakana': 'カタカナ: アイウエオ ⇔ ｱｲｳｴｵ',
    'textConverter.examples.symbols': '記号: （）「」！？ ⇔ ()「」!?',

    // RandomGenerator translations
    'randomGenerator.presets.label': 'プリセット',
    'randomGenerator.preset.strong': 'パスワード(強)',
    'randomGenerator.preset.medium': 'パスワード(中)',
    'randomGenerator.preset.pin': 'PIN',
    'randomGenerator.preset.token': 'トークン',
    'randomGenerator.length.label': '文字数: {length}',
    'randomGenerator.charTypes.label': '使用する文字種',
    'randomGenerator.charType.numbers': '数字 (0-9)',
    'randomGenerator.charType.uppercase': '大文字 (A-Z)',
    'randomGenerator.charType.lowercase': '小文字 (a-z)',
    'randomGenerator.charType.symbols': '記号',
    'randomGenerator.excludeOptions.label': '除外オプション',
    'randomGenerator.excludeSimilar': '似た文字を除外 (il1Lo0O)',
    'randomGenerator.excludeAmbiguous': '紛らわしい記号を除外 ({}[]()等)',
    'randomGenerator.generate': 'ランダム文字列を生成',
    'randomGenerator.result.label': '生成結果',
    'randomGenerator.copy': 'コピー',
    'randomGenerator.copied': 'コピー済み',
    'randomGenerator.regenerate': '再生成',
    'randomGenerator.history.label': '生成履歴',
    'randomGenerator.usedChars.label': '使用される文字',
    'randomGenerator.noCharsSelected': '文字種が選択されていません',
    'randomGenerator.error.noChars': 'エラー: 使用可能な文字が選択されていません',
    'randomGenerator.historyInput': '長さ:{length}, 文字種:{types}',
    'randomGenerator.charTypes.numbers': '数字',
    'randomGenerator.charTypes.uppercase': '大文字',
    'randomGenerator.charTypes.lowercase': '小文字',
    'randomGenerator.charTypes.symbols': '記号',

    // UUIDGenerator translations
    'uuidGenerator.version.label': 'UUIDバージョン',
    'uuidGenerator.version.v4': 'UUID v4 (ランダム)',
    'uuidGenerator.version.v1': 'UUID v1 (タイムスタンプベース)',
    'uuidGenerator.quantity.label': '生成数量',
    'uuidGenerator.generate': 'UUID生成',
    'uuidGenerator.result.label': '生成されたUUID',
    'uuidGenerator.copy': 'コピー',
    'uuidGenerator.copyAll': 'すべてコピー',
    'uuidGenerator.copied': 'コピー済み!',
    'uuidGenerator.description.v4': 'UUID v4: 完全にランダムな値を使用',
    'uuidGenerator.description.v1': 'UUID v1: タイムスタンプベース（簡易実装）',
    'uuidGenerator.historyOutput.single': '{version}',
    'uuidGenerator.historyOutput.multiple': '{count}個のUUID {version}',
    'uuidGenerator.historyOutput.generated': '{count}個生成',

    // HashGenerator translations
    'hashGenerator.inputMethod.label': '入力方法',
    'hashGenerator.inputMethod.text': 'テキスト入力',
    'hashGenerator.inputMethod.file': 'ファイル選択',
    'hashGenerator.textInput.label': 'ハッシュ化するテキスト',
    'hashGenerator.textInput.placeholder': 'ハッシュ化したいテキストを入力...',
    'hashGenerator.fileInput.label': 'ハッシュ化するファイル',
    'hashGenerator.fileName': 'ファイル名:',
    'hashGenerator.fileSize': 'ファイルサイズ:',
    'hashGenerator.insertSample': 'サンプル挿入',
    'hashGenerator.generating': 'ハッシュを生成中...',
    'hashGenerator.result.title': 'ハッシュ結果',
    'hashGenerator.copyAll': 'すべてコピー',
    'hashGenerator.copy': 'コピー',
    'hashGenerator.md5.deprecated': '非推奨',
    'hashGenerator.sha1.notRecommended': '推奨されない',
    'hashGenerator.sha256.recommended': '推奨',
    'hashGenerator.md5.warning': 'MD5は暗号学的に安全ではありません。セキュリティ用途には使用しないでください。',
    'hashGenerator.sha1.warning': 'SHA-1は脆弱性が発見されています。新しいシステムではSHA-256以上を使用してください。',
    'hashGenerator.sha256.info': 'SHA-256は現在も安全とされており、セキュリティ用途に適しています。',
    'hashGenerator.reset': 'リセット',
    'hashGenerator.algorithms.title': 'ハッシュアルゴリズムについて',
    'hashGenerator.algorithms.md5.title': 'MD5 (Message Digest 5)',
    'hashGenerator.algorithms.md5.desc': '128ビット（32桁）のハッシュ値。高速だが暗号学的に安全ではない。ファイルの整合性チェックのみに使用。',
    'hashGenerator.algorithms.sha1.title': 'SHA-1 (Secure Hash Algorithm 1)',
    'hashGenerator.algorithms.sha1.desc': '160ビット（40桁）のハッシュ値。2017年に実用的な攻撃が発見され、現在は推奨されない。',
    'hashGenerator.algorithms.sha256.title': 'SHA-256 (SHA-2)',
    'hashGenerator.algorithms.sha256.desc': '256ビット（64桁）のハッシュ値。現在も安全とされ、Bitcoin等で使用される。推奨される選択肢。',
    'hashGenerator.usage.title': '使用例',
    'hashGenerator.usage.integrity': 'ファイル整合性チェック: ダウンロードしたファイルが破損していないか確認',
    'hashGenerator.usage.password': 'パスワード保存: パスワードを直接保存せず、ハッシュ値で管理',
    'hashGenerator.usage.signature': 'デジタル署名: 文書の改ざん検出',
    'hashGenerator.usage.blockchain': 'ブロックチェーン: Bitcoin等の暗号通貨で使用',
    'hashGenerator.historyOutput': 'ハッシュ生成完了',

    // YamlJsonConverter translations
    'yamlJsonConverter.inputFormat.label': '入力形式:',
    'yamlJsonConverter.swapInputOutput': '⇄ 入出力切り替え',
    'yamlJsonConverter.insertYamlSample': 'YAMLサンプル',
    'yamlJsonConverter.insertJsonSample': 'JSONサンプル',
    'yamlJsonConverter.clear': 'クリア',
    'yamlJsonConverter.input.yaml': 'YAML入力',
    'yamlJsonConverter.input.json': 'JSON入力',
    'yamlJsonConverter.input.placeholder.yaml': 'YAMLを入力してください...',
    'yamlJsonConverter.input.placeholder.json': 'JSONを入力してください...',
    'yamlJsonConverter.error.title': 'エラー:',
    'yamlJsonConverter.output.yaml': 'YAML出力',
    'yamlJsonConverter.output.json': 'JSON出力',
    'yamlJsonConverter.execute': '変換実行',
    'yamlJsonConverter.copy': 'コピー',
    'yamlJsonConverter.copied': 'コピー済み!',
    'yamlJsonConverter.output.placeholder.yaml': '変換されたYAMLがここに表示されます...',
    'yamlJsonConverter.output.placeholder.json': '変換されたJSONがここに表示されます...',
    'yamlJsonConverter.features.title': '機能:',
    'yamlJsonConverter.features.yamlToJson': 'YAML → JSON: YAML形式をJSON形式に変換',
    'yamlJsonConverter.features.jsonToYaml': 'JSON → YAML: JSON形式をYAML形式に変換',
    'yamlJsonConverter.features.realtime': 'リアルタイム変換: 入力と同時に自動変換',
    'yamlJsonConverter.features.swap': '入出力切り替え: 変換結果を入力として再利用可能',
    'yamlJsonConverter.features.errorDetection': 'エラー検出: 構文エラーを詳細に表示',
    'yamlJsonConverter.error.empty': '入力テキストが空です',
    'yamlJsonConverter.historyOutput.yamlToJson': 'JSONに変換完了',
    'yamlJsonConverter.historyOutput.jsonToYaml': 'YAMLに変換完了',

    // CodeHighlighter translations
    'codeHighlighter.input.label': 'コードを入力してください',
    'codeHighlighter.input.placeholder': 'ここにコードを貼り付けてください...',
    'codeHighlighter.language.label': '言語選択',
    'codeHighlighter.language.auto': '自動検出',
    'codeHighlighter.theme.label': 'テーマ',
    'codeHighlighter.theme.dark': 'ダーク',
    'codeHighlighter.theme.light': 'ライト',
    'codeHighlighter.detectedLanguage.label': '検出された言語',
    'codeHighlighter.detectedLanguage.none': '未検出',
    'codeHighlighter.samples.label': 'サンプルコード',
    'codeHighlighter.result.title': 'ハイライト結果 ({language})',
    'codeHighlighter.copy': 'コピー',
    'codeHighlighter.copied': 'コピー済み!',
    'codeHighlighter.supportedLanguages': '対応言語: Python, Ruby, C/C++, Shell Script, Go, JavaScript, TypeScript, JSON, HTML, CSS',
    'codeHighlighter.autoDetection': '自動検出: コード内のキーワードパターンを解析して言語を推定',
    'codeHighlighter.manualSelection': '手動選択: 自動検出が不正確な場合は手動で言語を指定可能',
    'codeHighlighter.historyOutput': 'ハイライト実行',

    // MarkdownConverter translations
    'markdownConverter.mode.label': '変換モード',
    'markdownConverter.mode.mdToHtml': 'Markdown → HTML',
    'markdownConverter.mode.htmlToMd': 'HTML → Markdown',
    'markdownConverter.input.markdown': 'Markdown入力',
    'markdownConverter.input.html': 'HTML入力',
    'markdownConverter.input.placeholder.markdown': 'Markdownを入力してください...',
    'markdownConverter.input.placeholder.html': 'HTMLを入力してください...',
    'markdownConverter.insertSample': 'サンプル挿入',
    'markdownConverter.execute': '変換実行',
    'markdownConverter.output.html': 'HTML出力',
    'markdownConverter.output.markdown': 'Markdown出力',
    'markdownConverter.copy': 'コピー',
    'markdownConverter.copied': 'コピー済み!',
    'markdownConverter.result.code': '変換結果（コード）',
    'markdownConverter.result.preview': 'プレビュー',
    'markdownConverter.error.enter': '変換する内容を入力してください',
    'markdownConverter.error.conversion': '変換中にエラーが発生しました',
    'markdownConverter.warning.title': '注意:',
    'markdownConverter.warning.html': 'HTML → Markdown変換は簡易実装のため、複雑なHTMLは正確に変換されない場合があります',
    'markdownConverter.warning.sanitize': 'セキュリティのため、出力HTMLは自動的にサニタイズされます',
    'markdownConverter.historyOutput.mdToHtml': 'Markdown → HTML 変換',
    'markdownConverter.historyOutput.htmlToMd': 'HTML → Markdown 変換',

    // AsciiArtGenerator translations
    'asciiArtGenerator.category.label': 'カテゴリ選択',
    'asciiArtGenerator.category.all': 'すべて',
    'asciiArtGenerator.category.classic': 'クラシック',
    'asciiArtGenerator.category.yaruo': 'やる夫',
    'asciiArtGenerator.category.giko': 'ギコ',
    'asciiArtGenerator.category.oee': 'オエー',
    'asciiArtGenerator.category.maro': '麻呂',
    'asciiArtGenerator.category.other': 'その他キャラ',
    'asciiArtGenerator.category.emotion': '感情表現',
    'asciiArtGenerator.generate': 'ランダム生成',
    'asciiArtGenerator.copy': 'コピー',
    'asciiArtGenerator.copied': 'コピー済み!',
    'asciiArtGenerator.availableCount': '対象キャラ: {count}個のAAが利用可能',
    'asciiArtGenerator.currentDisplay': '現在表示: {character}',
    'asciiArtGenerator.result.title': '生成されたAA',
    'asciiArtGenerator.list.title': 'キャラクター一覧（{category}）',
    'asciiArtGenerator.usage.title': '使い方:',
    'asciiArtGenerator.usage.random': 'ランダム生成: 選択されたカテゴリからランダムにAAを表示',
    'asciiArtGenerator.usage.select': '個別選択: キャラクター一覧から好きなAAをクリック',
    'asciiArtGenerator.usage.copy': 'コピー: 生成されたAAをクリップボードにコピー',
    'asciiArtGenerator.usage.category': 'カテゴリ: モナー、やる夫、ギコなど人気キャラで絞り込み',
    'asciiArtGenerator.notice': '注意: AAは2ちゃんねる文化の一部として教育・文化的な目的で提供しています。',
    'asciiArtGenerator.historyInput': 'カテゴリ: {category}',
    'asciiArtGenerator.historyOutput.random': '{name}をランダム生成',
    'asciiArtGenerator.historyOutput.select': '{name}を選択',

    // JqExplorer translations
    'jqExplorer.jsonInput.title': 'JSON入力',
    'jqExplorer.insertSample': 'サンプルJSON',
    'jqExplorer.clear': 'クリア',
    'jqExplorer.input.placeholder': 'JSONデータを入力してください...',
    'jqExplorer.error.title': 'エラー:',
    'jqExplorer.tree.title': 'JSONツリー（クリックしてjqクエリを生成）',
    'jqExplorer.tree.instruction': '💡 任意のフィールドをクリックすると、対応するjqクエリが自動生成されます',
    'jqExplorer.query.title': '生成されたjqクエリ',
    'jqExplorer.query.copy': 'クエリをコピー',
    'jqExplorer.query.copied': 'コピー済み!',
    'jqExplorer.result.title': '実行結果',
    'jqExplorer.usage.title': '使い方:',
    'jqExplorer.usage.step1': 'JSONを入力すると、構造化されたツリー表示になります',
    'jqExplorer.usage.step2': '任意のフィールドをクリックすると、そのフィールドを抽出するjqクエリが生成されます',
    'jqExplorer.usage.step3': '生成されたクエリをコピーして、実際のjqコマンドで使用できます',
    'jqExplorer.usage.step4': 'クエリの実行結果もリアルタイムで確認できます',
    'jqExplorer.historyInput': 'Path: {path}',
    'jqExplorer.historyOutput': 'jqクエリ実行: {query}',

    // CertificateViewer translations
    'certificateViewer.input.title': 'X.509証明書入力',
    'certificateViewer.insertSample': 'サンプル証明書',
    'certificateViewer.copyCert': '証明書をコピー',
    'certificateViewer.copied': 'コピー済み!',
    'certificateViewer.clear': 'クリア',
    'certificateViewer.input.placeholder': '-----BEGIN CERTIFICATE-----で始まるPEM形式の証明書を入力してください...',
    'certificateViewer.error.title': 'エラー:',
    'certificateViewer.expired': '⚠️ この証明書は有効期限切れです',
    'certificateViewer.expiring': '⚠️ この証明書は{days}日後に有効期限切れになります',
    'certificateViewer.valid': '✅ この証明書は有効です（{days}日間有効）',
    'certificateViewer.basicInfo.title': '基本情報',
    'certificateViewer.version': 'バージョン',
    'certificateViewer.serialNumber': 'シリアル番号',
    'certificateViewer.issuer.title': '発行者 (Issuer)',
    'certificateViewer.subject.title': '主体者 (Subject)',
    'certificateViewer.validity.title': '有効期限',
    'certificateViewer.validFrom': '有効期限開始',
    'certificateViewer.validTo': '有効期限終了',
    'certificateViewer.publicKey.title': '公開鍵',
    'certificateViewer.publicKey.algorithm': 'アルゴリズム',
    'certificateViewer.publicKey.keySize': '鍵サイズ',
    'certificateViewer.publicKey.exponent': '指数',
    'certificateViewer.signature.title': '署名',
    'certificateViewer.signature.algorithm': '署名アルゴリズム',
    'certificateViewer.signature.hash': 'ハッシュ関数',
    'certificateViewer.extensions.title': '拡張',
    'certificateViewer.fingerprint.title': 'フィンガープリント',
    'certificateViewer.notice': '注意: この証明書ビューアーは教育・デバッグ目的のものです。実際の証明書検証には専用ツールを使用してください。',
    'certificateViewer.historyOutput': '証明書情報を解析',

    // ColorPreview translations
    'colorPreview.input.label': 'カラーコードを入力',
    'colorPreview.input.placeholder': '#3b82f6 または rgb(59, 130, 246)',
    'colorPreview.colorPicker': 'カラーピッカー',
    'colorPreview.error.invalid': '有効な色コードを入力してください (#hex, #rgb, rgb(r,g,b))',
    'colorPreview.complementary.title': '補色',
    'colorPreview.complementary.copy': '補色をコピー',
    'colorPreview.samples.title': 'サンプルカラー',
    'colorPreview.insertSample': 'サンプル挿入',
    'colorPreview.reset': 'リセット',
    'colorPreview.copy': 'コピー',
    'colorPreview.copied': 'コピー済み',
    'colorPreview.historyOutput': '{hex} → RGB({r}, {g}, {b})',

    // DateTimeFormatter translations
    'datetimeFormatter.inputFormat.label': '入力形式',
    'datetimeFormatter.format.unix': 'Unix Time',
    'datetimeFormatter.format.iso': 'ISO8601',
    'datetimeFormatter.format.local': 'ローカル時刻',
    'datetimeFormatter.input.label': '日時を入力',
    'datetimeFormatter.supportedFormats': '対応形式: {formats}',
    'datetimeFormatter.result.title': '変換結果',
    'datetimeFormatter.unix.title': 'Unix Time (秒)',
    'datetimeFormatter.unix.milliseconds': 'ミリ秒: {ms}',
    'datetimeFormatter.iso.title': 'ISO8601 (UTC)',
    'datetimeFormatter.local.title': 'ローカル時刻',
    'datetimeFormatter.japan.title': '日本時間 (JST)',
    'datetimeFormatter.utc.title': 'UTC時刻',
    'datetimeFormatter.insertCurrent': '現在時刻を挿入',
    'datetimeFormatter.reset': 'リセット',
    'datetimeFormatter.copy': 'コピー',
    'datetimeFormatter.copied': 'コピー済み',
    'datetimeFormatter.error.invalidUnix': '無効なUnix時刻形式です',
    'datetimeFormatter.error.invalidISO': '無効なISO8601形式です',
    'datetimeFormatter.error.invalidDate': '無効な日時形式です',
    'datetimeFormatter.error.unknownType': '不明な入力タイプです',
    'datetimeFormatter.error.invalidDateTime': '無効な日時です',
    'datetimeFormatter.error.conversion': '変換エラーが発生しました',
    'datetimeFormatter.historyOutput': '変換完了: {iso}',

    // CronParser translations
    'cronParser.input.label': 'Cron式を入力',
    'cronParser.input.placeholder': '0 9 * * 1-5',
    'cronParser.format': 'フォーマット: 分(0-59) 時(0-23) 日(1-31) 月(1-12) 曜日(0-7)',
    'cronParser.fields.title': 'フィールド解析',
    'cronParser.schedule.title': '実行スケジュール',
    'cronParser.nextRuns.title': '次回実行日時（予測）',
    'cronParser.nextRun': '次回',
    'cronParser.runCount': '{count}回目',
    'cronParser.samples.title': 'サンプル',
    'cronParser.sample.weekdays': '平日の9時',
    'cronParser.sample.every2hours': '2時間おき',
    'cronParser.sample.monthly': '毎月1日の1時30分',
    'cronParser.sample.sunday': '毎週日曜の0時',
    'cronParser.sample.every15min': '15分おき',
    'cronParser.reset': 'リセット',
    'cronParser.copy': 'コピー',
    'cronParser.copied': 'コピー済み',
    'cronParser.error.invalidFormat': 'Cron式は5つのフィールド（分 時 日 月 曜日）である必要があります',
    'cronParser.error.parseFailed': 'Cron式の解析に失敗しました',
    'cronParser.field.minute': '分',
    'cronParser.field.hour': '時',
    'cronParser.field.day': '日',
    'cronParser.field.month': '月',
    'cronParser.field.weekday': '曜日',
    'cronParser.historyOutput': 'Cron式解析完了',
    'cronParser.desc.everyMinute': '毎分',
    'cronParser.desc.everyHour': '毎時',
    'cronParser.desc.everyDay': '毎日',
    'cronParser.desc.everyMonth': '毎月',
    'cronParser.desc.every': '毎回',
    'cronParser.desc.from': 'から',
    'cronParser.desc.intervalMinute': '分おき',
    'cronParser.desc.intervalHour': '時間おき',
    'cronParser.desc.intervalDay': '日おき',
    'cronParser.desc.intervalMonth': 'ヶ月おき',
    'cronParser.desc.intervalWeekday': '日おき（曜日）',
    'cronParser.desc.interval': '間隔',
    'cronParser.desc.minute': '分',
    'cronParser.desc.hour': '時',
    'cronParser.desc.execute': 'に実行',
    'cronParser.desc.executeOn': 'の{time}に実行',
    'cronParser.desc.executeDaily': '毎日{time}に実行',
    'cronParser.desc.executeMonthly': '毎月{day}の{time}に実行',
    'cronParser.desc.or': 'または',
    'cronParser.dayName.0': '日',
    'cronParser.dayName.1': '月',
    'cronParser.dayName.2': '火', 
    'cronParser.dayName.3': '水',
    'cronParser.dayName.4': '木',
    'cronParser.dayName.5': '金',
    'cronParser.dayName.6': '土',
    'cronParser.monthName.1': '1月',
    'cronParser.monthName.2': '2月',
    'cronParser.monthName.3': '3月',
    'cronParser.monthName.4': '4月',
    'cronParser.monthName.5': '5月',
    'cronParser.monthName.6': '6月',
    'cronParser.monthName.7': '7月',
    'cronParser.monthName.8': '8月',
    'cronParser.monthName.9': '9月',
    'cronParser.monthName.10': '10月',
    'cronParser.monthName.11': '11月',
    'cronParser.monthName.12': '12月',

    // HtmlEscaper translations
    'htmlEscaper.mode.label': '処理モード',
    'htmlEscaper.mode.escape': 'エスケープ',
    'htmlEscaper.mode.unescape': 'アンエスケープ',
    'htmlEscaper.mode.description.escape': 'HTMLの特殊文字をエンティティに変換します',
    'htmlEscaper.mode.description.unescape': 'HTMLエンティティを元の文字に変換します',
    'htmlEscaper.input.escape': 'エスケープするテキスト',
    'htmlEscaper.input.unescape': 'アンエスケープするHTMLエンティティ',
    'htmlEscaper.input.placeholder.escape': '<div class="example">HTML & 特殊文字</div>',
    'htmlEscaper.input.placeholder.unescape': '&lt;div class=&quot;example&quot;&gt;HTML &amp; &#x7279;&#x6B8A;&#x6587;&#x5B57;&lt;/div&gt;',
    'htmlEscaper.stats.title': '統計情報',
    'htmlEscaper.stats.inputLength': '入力文字数',
    'htmlEscaper.stats.outputLength': '出力文字数',
    'htmlEscaper.stats.difference': '増減',
    'htmlEscaper.stats.escapedChars': 'エスケープ文字',
    'htmlEscaper.stats.specialChars': '特殊文字',
    'htmlEscaper.output.escape': 'エスケープ結果',
    'htmlEscaper.output.unescape': 'アンエスケープ結果',
    'htmlEscaper.swapInputOutput': '入力と出力を入れ替え',
    'htmlEscaper.copy': 'コピー',
    'htmlEscaper.copied': 'コピー済み',
    'htmlEscaper.entities.title': 'よく使われるHTMLエンティティ',
    'htmlEscaper.insertSample': 'サンプル挿入',
    'htmlEscaper.reset': 'リセット',
    'htmlEscaper.error.conversion': '変換エラーが発生しました',
    'htmlEscaper.historyOutput.escape': 'HTMLエスケープ完了',
    'htmlEscaper.historyOutput.unescape': 'HTMLアンエスケープ完了',

    // CharacterCount translations

    // JSONFormatter translations
    'jsonFormatter.settings.indent': 'インデント',
    'jsonFormatter.settings.twoSpaces': '2スペース',
    'jsonFormatter.settings.fourSpaces': '4スペース',
    'jsonFormatter.settings.tab': 'タブ',
    'jsonFormatter.button.compress': '圧縮',
    'jsonFormatter.button.insertSample': 'サンプル挿入',
    'jsonFormatter.button.copyResult': '結果をコピー',
    'jsonFormatter.button.reset': 'リセット',
    'jsonFormatter.success': '有効なJSONです',

    // BaseConverter translations
    'baseConverter.mode.encode': 'エンコード',
    'baseConverter.mode.decode': 'デコード',
    'baseConverter.format.base64': 'Base64',
    'baseConverter.format.base64url': 'Base64URL',
    'baseConverter.format.base58': 'Base58',
    'baseConverter.button.insertSample': 'サンプル挿入',
    'baseConverter.input.placeholderEncode': 'エンコードしたいテキストを入力...',
    'baseConverter.input.placeholderDecode': '{format}文字列を入力...',
    'baseConverter.stats.chars': '文字数',
    'baseConverter.stats.bytes': 'バイト数',
    'baseConverter.button.copyResult': '結果をコピー',
    'baseConverter.button.swap': '入出力を入れ替え',
    'baseConverter.button.reset': 'リセット',
    'baseConverter.format.description.title': 'エンコーディング形式について',
    'baseConverter.format.base64.description': '標準的なBase64エンコーディング。A-Z, a-z, 0-9, +, / の64文字を使用。パディングに = を使用。',
    'baseConverter.format.base64url.description': 'URL安全なBase64。+ を -、/ を _ に置換し、パディング = を省略。JWT等で使用。',
    'baseConverter.format.base58.description': 'Bitcoin等で使用。紛らわしい文字（0, O, I, l）を除いた58文字を使用。',

    // TextConverter translations
    'textConverter.direction.halfToFull': '半角 → 全角',
    'textConverter.direction.fullToHalf': '全角 → 半角',
    'textConverter.button.copyResult': '結果をコピー',
    'textConverter.button.reset': 'リセット',

    // RandomGenerator translations
    'randomGenerator.preset.strongPassword': 'パスワード(強)',
    'randomGenerator.preset.mediumPassword': 'パスワード(中)',
    'randomGenerator.exclude.label': '除外オプション',
    'randomGenerator.exclude.similar': '似た文字を除外 (il1Lo0O)',
    'randomGenerator.exclude.ambiguous': '紛らわしい記号を除外 ({}[]()等)',
    'randomGenerator.button.generate': 'ランダム文字列を生成',
    'randomGenerator.button.regenerate': '再生成',
    'randomGenerator.charPreview.label': '使用される文字',
    'randomGenerator.charPreview.numbers': '数字',
    'randomGenerator.charPreview.uppercase': '大文字',
    'randomGenerator.charPreview.lowercase': '小文字',
    'randomGenerator.charPreview.symbols': '記号',
    'randomGenerator.charPreview.noSelection': '文字種が選択されていません',
    'randomGenerator.button.copy': 'コピー',
    'randomGenerator.historyInput.length': '長さ:{length}, 文字種:{types}',
    'randomGenerator.historyInput.types.numbers': '数字',
    'randomGenerator.historyInput.types.uppercase': '大文字',
    'randomGenerator.historyInput.types.lowercase': '小文字',
    'randomGenerator.historyInput.types.symbols': '記号',

    // UUIDGenerator translations
    'uuidGenerator.button.generate': 'UUID生成',
    'uuidGenerator.result.title': '生成されたUUID',
    'uuidGenerator.button.copyAll': 'すべてコピー',
    'uuidGenerator.button.copy': 'コピー',

    // HashGenerator translations
    'hashGenerator.mode.label': '入力方法',
    'hashGenerator.mode.text': 'テキスト入力',
    'hashGenerator.mode.file': 'ファイル選択',
    'hashGenerator.input.text.label': 'ハッシュ化するテキスト',
    'hashGenerator.input.text.placeholder': 'ハッシュ化したいテキストを入力...',
    'hashGenerator.input.file.label': 'ハッシュ化するファイル',
    'hashGenerator.button.insertSample': 'サンプル挿入',
    'hashGenerator.fileInfo.name': 'ファイル名',
    'hashGenerator.fileInfo.size': 'ファイルサイズ',
    'hashGenerator.stats.chars': '文字数',
    'hashGenerator.stats.bytes': 'バイト数',
    'hashGenerator.loading': 'ハッシュを生成中...',
    'hashGenerator.button.copyAll': 'すべてコピー',
    'hashGenerator.button.reset': 'リセット',
    'hashGenerator.algorithm.md5': 'MD5',
    'hashGenerator.algorithm.sha1': 'SHA-1',
    'hashGenerator.algorithm.sha256': 'SHA-256',
    'hashGenerator.status.deprecated': '非推奨',
    'hashGenerator.status.notRecommended': '推奨されない',
    'hashGenerator.status.recommended': '推奨',
    'hashGenerator.warning.md5': 'MD5は暗号学的に安全ではありません。セキュリティ用途には使用しないでください。',
    'hashGenerator.warning.sha1': 'SHA-1は脆弱性が発見されています。新しいシステムではSHA-256以上を使用してください。',
    'hashGenerator.info.sha256': 'SHA-256は現在も安全とされており、セキュリティ用途に適しています。',
    'hashGenerator.about.title': 'ハッシュアルゴリズムについて',
    'hashGenerator.about.md5.title': 'MD5 (Message Digest 5)',
    'hashGenerator.about.md5.description': '128ビット（32桁）のハッシュ値。高速だが暗号学的に安全ではない。ファイルの整合性チェックのみに使用。',
    'hashGenerator.about.sha1.title': 'SHA-1 (Secure Hash Algorithm 1)',
    'hashGenerator.about.sha1.description': '160ビット（40桁）のハッシュ値。2017年に実用的な攻撃が発見され、現在は推奨されない。',
    'hashGenerator.about.sha256.title': 'SHA-256 (SHA-2)',
    'hashGenerator.about.sha256.description': '256ビット（64桁）のハッシュ値。現在も安全とされ、Bitcoin等で使用される。推奨される選択肢。',

    // YamlJsonConverter translations
    'yamlJsonConverter.inputFormat.yaml': 'YAML',
    'yamlJsonConverter.inputFormat.json': 'JSON',
    'yamlJsonConverter.button.swap': '⇄ 入出力切り替え',
    'yamlJsonConverter.button.yamlSample': 'YAMLサンプル',
    'yamlJsonConverter.button.jsonSample': 'JSONサンプル',
    'yamlJsonConverter.button.clear': 'クリア',
    'yamlJsonConverter.input.label': '{format}入力',
    'yamlJsonConverter.input.placeholder': '{format}を入力してください...',
    'yamlJsonConverter.output.label': '{format}出力',
    'yamlJsonConverter.output.placeholder': '変換された{format}がここに表示されます...',
    'yamlJsonConverter.button.convert': '変換実行',
    'yamlJsonConverter.button.copy': 'コピー',
    'yamlJsonConverter.error.failed': '変換に失敗しました',
    'yamlJsonConverter.historyOutput.yaml': 'YAML text',
    'yamlJsonConverter.historyOutput.json': 'JSON text',

    // Common
    'common.back': '戻る',
    'common.copy': 'コピー',
    'common.copied': 'コピー済み'
  },
  en: {

    // Header
    'app.title': 'tarutaru',
    'header.toggleTheme': 'Toggle theme',
    
    // Main page
    'main.title': '',
    'main.subtitle': 'Handy tools in one place',

    // Categories
    'category.all': 'All',
    'category.text': 'Text Processing',
    'category.development': 'Development',
    'category.data': 'Data Conversion',
    'category.generator': 'Generator',
    'category.utility': 'Utility',
    
    // Tools
    'tool.characterCount.name': 'Character Count',
    'tool.characterCount.description': 'Real-time character count display',
    'tool.textConverter.name': 'Text Converter',
    'tool.textConverter.description': 'Convert between full-width and half-width characters',
    'tool.randomGenerator.name': 'Random String Generator',
    'tool.randomGenerator.description': 'Generate strings with custom length and character sets',
    'tool.jsonFormatter.name': 'JSON Formatter',
    'tool.jsonFormatter.description': 'Format and beautify JSON data',
    'tool.qrGenerator.name': 'QR Code Generator',
    'tool.qrGenerator.description': 'Generate QR codes from text',
    'tool.jwtViewer.name': 'JWT Viewer',
    'tool.jwtViewer.description': 'Decode and display JWT tokens',
    'tool.baseConverter.name': 'Base64/58 Converter',
    'tool.baseConverter.description': 'Convert between Base64, Base64URL, and Base58',
    'tool.hashGenerator.name': 'Hash Generator',
    'tool.hashGenerator.description': 'Generate MD5, SHA-1, SHA-256 hashes',
    'tool.uuidGenerator.name': 'UUID Generator',
    'tool.uuidGenerator.description': 'Generate UUID v4/v1',
    'tool.radixConverter.name': 'Radix Converter',
    'tool.radixConverter.description': 'Convert between binary, octal, decimal, and hexadecimal',
    'tool.markdownConverter.name': 'Markdown Converter',
    'tool.markdownConverter.description': 'Convert between Markdown and HTML',
    'tool.textSorter.name': 'Text Sorter',
    'tool.textSorter.description': 'Sort lines, remove duplicates, and shuffle text',
    'tool.codeHighlighter.name': 'Code Highlighter',
    'tool.codeHighlighter.description': 'Automatic language detection and syntax highlighting',
    'tool.asciiArtGenerator.name': 'ASCII Art Generator',
    'tool.asciiArtGenerator.description': 'Generate random 2chan-style ASCII art',
    'tool.yamlJsonConverter.name': 'YAML/JSON Converter',
    'tool.yamlJsonConverter.description': 'Convert between YAML and JSON formats',
    'tool.jqExplorer.name': 'jq Explorer',
    'tool.jqExplorer.description': 'Generate jq queries by clicking JSON fields',
    'tool.certificateViewer.name': 'Certificate Viewer (WIP)',
    'tool.certificateViewer.description': 'Display X.509 certificate details',
    'tool.colorPreview.name': 'Color Preview',
    'tool.colorPreview.description': 'RGB/HEX color code preview and conversion',
    'tool.datetimeFormatter.name': 'DateTime Formatter',
    'tool.datetimeFormatter.description': 'Convert between Unix Time ⇔ ISO8601 ⇔ Local Time',
    'tool.cronParser.name': 'Cron Parser',
    'tool.cronParser.description': 'Parse cron expressions and show next execution times',
    'tool.curlConverter.name': 'curl Converter',
    'tool.curlConverter.description': 'Convert between curl commands ⇔ HTTP requests',
    // CurlConverter translations
    'curlConverter.mode.label': 'Conversion Direction',
    'curlConverter.mode.curlToHttp': 'curl → HTTP',
    'curlConverter.mode.httpToCurl': 'HTTP → curl',
    'curlConverter.curl.input.label': 'Enter curl command',
    'curlConverter.curl.input.placeholder': 'curl -X POST https://api.example.com/users -H \'Content-Type: application/json\' -d \'{...}\'',
    'curlConverter.http.method.label': 'Method',
    'curlConverter.http.url.label': 'URL',
    'curlConverter.http.url.placeholder': 'https://api.example.com/users',
    'curlConverter.http.headers.label': 'Headers (one per line)',
    'curlConverter.http.headers.placeholder': 'Content-Type: application/json\nAuthorization: Bearer token123',
    'curlConverter.http.body.label': 'Request Body',
    'curlConverter.http.body.placeholder': '{"name": "John Doe", "email": "john@example.com"}',
    'curlConverter.result.httpRequest': 'HTTP Request',
    'curlConverter.result.curlCommand': 'curl Command',
    'curlConverter.insertSample': 'Insert Sample',
    'curlConverter.reset': 'Reset',
    'curlConverter.copy': 'Copy',
    'curlConverter.copied': 'Copied',
    'curlConverter.error.conversion': 'Conversion error occurred',
    'curlConverter.historyOutput.curlToHttp': 'curl→HTTP conversion completed: {method} {url}',
    'curlConverter.historyOutput.httpToCurl': 'HTTP→curl conversion completed',
    'tool.htmlEscaper.name': 'HTML Escaper',
    'tool.htmlEscaper.description': 'HTML escape and unescape processing',
    'tool.jsonLogViewer.name': 'JSON Log Viewer',
    'tool.jsonLogViewer.description': 'Format, filter, and search JSON logs',
    // JsonLogViewer translations
    'jsonLogViewer.settings.title': 'Display Settings',
    'jsonLogViewer.settings.timestamp': 'Timestamp',
    'jsonLogViewer.settings.level': 'Level',
    'jsonLogViewer.settings.message': 'Message',
    'jsonLogViewer.settings.showRaw': 'Show Raw Logs',
    'jsonLogViewer.filter.level': 'Log Level',
    'jsonLogViewer.filter.all': 'All Levels',
    'jsonLogViewer.filter.error': 'Error',
    'jsonLogViewer.filter.warn': 'Warning',
    'jsonLogViewer.filter.info': 'Info',
    'jsonLogViewer.filter.debug': 'Debug',
    'jsonLogViewer.filter.trace': 'Trace',
    'jsonLogViewer.search.label': 'Search',
    'jsonLogViewer.search.placeholder': 'Search messages...',
    'jsonLogViewer.maxLines': 'Max Lines',
    'jsonLogViewer.stats.title': 'Statistics',
    'jsonLogViewer.stats.totalLines': 'Total lines:',
    'jsonLogViewer.stats.showing': 'Showing:',
    'jsonLogViewer.input.label': 'Enter JSON logs (one JSON object per line)',
    'jsonLogViewer.input.placeholder': '{"timestamp":"2023-12-20T09:15:23.456Z","level":"info","message":"Application started"}\n{"timestamp":"2023-12-20T09:16:30.234Z","level":"error","message":"Database connection failed"}',
    'jsonLogViewer.results.title': 'Analysis Results ({count} items)',
    'jsonLogViewer.export': 'Export',
    'jsonLogViewer.showRawLog': 'Show raw log',
    'jsonLogViewer.insertSample': 'Insert Sample',
    'jsonLogViewer.reset': 'Reset',
    'jsonLogViewer.copy': 'Copy',
    'jsonLogViewer.copied': 'Copied',
    'jsonLogViewer.error.parsing': 'Error occurred while parsing logs',
    'jsonLogViewer.historyInput': '{count} lines of logs',
    'jsonLogViewer.historyOutput': 'Analysis completed: {errors} errors, {warnings} warnings',
    'tool.caseConverter.name': 'Case Converter',
    'tool.caseConverter.description': 'Convert between snake_case ⇔ camelCase ⇔ kebab-case',
    'tool.curlToCode.name': 'curl to Code',
    'tool.curlToCode.description': 'Convert curl commands to various programming languages',
    
    // CaseConverter translations
    'caseConverter.input.label': 'Enter text to convert',
    'caseConverter.input.placeholder': 'user_profile_data or getUserProfileData etc.',
    'caseConverter.detected': 'Detected case:',
    'caseConverter.mixed': 'mixed/unknown',
    'caseConverter.results': 'Conversion Results',
    'caseConverter.examples.title': 'Usage Examples',
    'caseConverter.examples.programming': 'Programming',
    'caseConverter.examples.web': 'Web Development',
    'caseConverter.patterns.title': 'Common Conversion Patterns',
    'caseConverter.sample': 'Random Sample',
    'caseConverter.reset': 'Reset',
    'caseConverter.case.snake_case': 'Common for variables (Python, Ruby, etc.)',
    'caseConverter.case.camelCase': 'JavaScript, Java variable names',
    'caseConverter.case.PascalCase': 'Class names, constructor names',
    'caseConverter.case.kebab-case': 'CSS, HTML attributes, URLs, etc.',
    'caseConverter.case.SCREAMING_SNAKE_CASE': 'Common for constants',
    'caseConverter.case.Title Case': 'Headings, titles',
    'caseConverter.case.lowercase': 'All lowercase',
    'caseConverter.case.UPPERCASE': 'All uppercase',
    
    // CurlToCode translations
    'curlToCode.input.label': 'Enter curl command',
    'curlToCode.input.placeholder': 'curl -X POST https://api.example.com/users -H "Content-Type: application/json" -d \'{"name": "John"}\'',
    'curlToCode.parseError': 'Parse Error',
    'curlToCode.parseSuccess': 'Parse Success',
    'curlToCode.results': 'Conversion Results',
    'curlToCode.examples.title': 'Sample curl Commands',
    'curlToCode.examples.get': 'GET Request',
    'curlToCode.examples.post': 'POST Request (JSON)',
    'curlToCode.examples.auth': 'Authenticated Request',
    'curlToCode.examples.headers': 'Custom Headers',
    'curlToCode.examples.form': 'Form Data',
    'curlToCode.examples.file': 'File Upload',
    'curlToCode.sample': 'Insert Sample',
    'curlToCode.clear': 'Clear',
    'curlToCode.copy': 'Copy',
    'curlToCode.selectLanguage': 'Select Output Language',
    'curlToCode.code': 'Code',
    'curlToCode.execution': 'Execution Instructions',
    
    // JWTViewer translations
    'jwtViewer.title': 'JWT Viewer',
    'jwtViewer.insertSample': 'Insert Sample',
    'jwtViewer.input.label': 'Enter JWT string',
    'jwtViewer.error.title': 'JWT Error',
    'jwtViewer.error.invalidFormat': 'JWT must consist of three parts (header, payload, signature)',
    'jwtViewer.error.decodeFailed': 'Failed to parse JWT',
    'jwtViewer.error.invalidBase64': 'Invalid base64url encoding',
    'jwtViewer.status.noExpiration': 'No expiration info',
    'jwtViewer.status.expired': 'Expired ({seconds} seconds ago)',
    'jwtViewer.status.expiring': 'Expiring soon ({seconds} seconds)',
    'jwtViewer.status.valid': 'Valid (expires in {hours} hours)',
    'jwtViewer.header.title': 'Header',
    'jwtViewer.payload.title': 'Payload',
    'jwtViewer.signature.title': 'Signature',
    'jwtViewer.algorithm': 'Algorithm',
    'jwtViewer.type': 'Type',
    'jwtViewer.keyId': 'Key ID',
    'jwtViewer.claims.title': 'Standard Claims',
    'jwtViewer.claims.issuer': 'Issuer (iss)',
    'jwtViewer.claims.subject': 'Subject (sub)',
    'jwtViewer.claims.audience': 'Audience (aud)',
    'jwtViewer.claims.expiration': 'Expiration (exp)',
    'jwtViewer.claims.notBefore': 'Not Before (nbf)',
    'jwtViewer.claims.issuedAt': 'Issued At (iat)',
    'jwtViewer.claims.jwtId': 'JWT ID (jti)',
    'jwtViewer.signature.warning': 'This tool only displays JWT structure and does not verify signatures. For security-critical applications, use proper verification libraries.',
    'jwtViewer.usage.title': 'Usage Instructions',
    'jwtViewer.usage.step1': 'Paste JWT (JSON Web Token) string into the text area above',
    'jwtViewer.usage.step2': 'Header and payload are automatically decoded and displayed in readable format',
    'jwtViewer.usage.step3': 'If expiration (exp) is present, validity is checked',
    'jwtViewer.usage.step4': 'This tool is display-only and does not verify signatures',
    'jwtViewer.historyOutput': 'JWT parsing completed',
    
    // TextSorter translations
    'textSorter.input.label': 'Text to sort (one item per line)',
    'textSorter.input.placeholder': 'Enter items to sort, one per line...',
    'textSorter.insertSample': 'Insert Sample',
    'textSorter.sortMethod': 'Sort Method',
    'textSorter.sortOrder': 'Sort Order',
    'textSorter.mode.alphabetical': 'Alphabetical',
    'textSorter.mode.numerical': 'Numerical',
    'textSorter.mode.length': 'By Length',
    'textSorter.mode.random': 'Random',
    'textSorter.order.asc': 'Ascending (A→Z, Small→Large, Short→Long)',
    'textSorter.order.desc': 'Descending (Z→A, Large→Small, Long→Short)',
    'textSorter.caseSensitive': 'Case sensitive',
    'textSorter.removeDuplicates': 'Remove duplicates',
    'textSorter.removeEmpty': 'Remove empty lines',
    'textSorter.execute': 'Execute Sort',
    'textSorter.result': 'Sort Result',
    'textSorter.reverse': 'Reverse Order',
    'textSorter.stats.inputLines': 'Input Lines',
    'textSorter.stats.outputLines': 'Output Lines',
    'textSorter.stats.removedEmpty': 'Removed Empty',
    'textSorter.stats.removedDuplicates': 'Removed Duplicates',
    'textSorter.explanation.title': 'Sort Method Explanations:',
    'textSorter.explanation.alphabetical': 'Alphabetical: Sort by character code (Japanese support)',
    'textSorter.explanation.numerical': 'Numerical: Parse as numbers and sort (strings treated as 0)',
    'textSorter.explanation.length': 'By Length: Sort by string length',
    'textSorter.explanation.random': 'Random: Shuffle in random order',
    'textSorter.historyInput': '{count} lines',
    'textSorter.historyOutput': 'Sort completed: {mode}',
    'textSorter.order.asc.short': ' (Ascending)',
    'textSorter.order.desc.short': ' (Descending)',
    
    // QRGenerator translations
    'qrGenerator.presets': 'Presets',
    'qrGenerator.preset.website': 'Website',
    'qrGenerator.preset.email': 'Email',
    'qrGenerator.preset.phone': 'Phone',
    'qrGenerator.preset.sms': 'SMS',
    'qrGenerator.preset.wifi': 'WiFi',
    'qrGenerator.preset.vcard': 'vCard',
    'qrGenerator.input.label': 'Text to convert to QR code',
    'qrGenerator.input.placeholder': 'URL, text, contact information, etc...',
    'qrGenerator.characterCount': 'Character count: {count}',
    'qrGenerator.size': 'Size: {size}px',
    'qrGenerator.margin': 'Margin: {margin}',
    'qrGenerator.errorCorrection': 'Error Correction Level',
    'qrGenerator.errorLevel.L': 'L (~7%) - Low',
    'qrGenerator.errorLevel.M': 'M (~15%) - Medium',
    'qrGenerator.errorLevel.Q': 'Q (~25%) - High',
    'qrGenerator.errorLevel.H': 'H (~30%) - Highest',
    'qrGenerator.foregroundColor': 'Foreground Color',
    'qrGenerator.backgroundColor': 'Background Color',
    'qrGenerator.result': 'QR Code',
    'qrGenerator.loading': 'Generating...',
    'qrGenerator.download': 'Download',
    'qrGenerator.copyImage': 'Copy Image',
    'qrGenerator.error.generateFailed': 'Failed to generate QR code',
    'qrGenerator.historyOutput': 'QR code generation completed',
    'qrGenerator.usage.title': 'Usage Instructions',
    'qrGenerator.usage.step1': 'Enter text or select a preset',
    'qrGenerator.usage.step2': 'QR code is automatically generated',
    'qrGenerator.usage.step3': 'Customize size, colors, and error correction level',
    'qrGenerator.usage.step4': 'Download or copy to clipboard',
    
    // RadixConverter translations
    'radixConverter.input.label': 'Input Value',
    'radixConverter.input.placeholder': 'Enter number to convert',
    'radixConverter.inputBase.label': 'Input Base',
    'radixConverter.convert': 'Convert Base',
    'radixConverter.result': 'Conversion Result',
    'radixConverter.copy': 'Copy',
    'radixConverter.availableChars': 'Available characters:',
    'radixConverter.error.enterValue': 'Please enter a value',
    'radixConverter.error.invalidChars': 'Contains invalid characters for base {base}',
    'radixConverter.error.cannotConvert': 'Cannot convert value',
    'radixConverter.error.conversionError': 'Error occurred during conversion',
    'radixConverter.base.binary': '2 (Binary)',
    'radixConverter.base.octal': '8 (Octal)',
    'radixConverter.base.decimal': '10 (Decimal)',
    'radixConverter.base.hexadecimal': '16 (Hexadecimal)',
    'radixConverter.base.base32': '32 (Base32)',
    'radixConverter.base.base36': '36 (Base36)',
    'radixConverter.historyInput': 'Base {base}: {value}',
    'radixConverter.historyOutput': 'Conversion completed',

    // CharacterCount translations
    'characterCount.input.label': 'Enter text to count',
    'characterCount.input.placeholder': 'Enter text here...',
    'characterCount.settings': 'Count Settings',
    'characterCount.includeSpaces': 'Include spaces',
    'characterCount.includeNewlines': 'Include newlines',
    'characterCount.result': 'Count Result',
    'characterCount.characters': 'Characters',
    'characterCount.words': 'Words',
    'characterCount.lines': 'Lines',
    'characterCount.japaneseChars': 'Japanese Characters',
    'characterCount.totalWithSpaces': 'Total (with spaces & newlines)',
    'characterCount.excludeSpaces': 'Excluding spaces',
    'characterCount.excludeNewlines': 'Excluding newlines',
    'characterCount.excludeSpacesNewlines': 'Excluding spaces & newlines',
    'characterCount.copyResult': 'Copy Result',
    'characterCount.copied': 'Copied',
    'characterCount.reset': 'Reset',

    // JSONFormatter translations
    'jsonFormatter.indent.label': 'Indent:',
    'jsonFormatter.indent.2spaces': '2 spaces',
    'jsonFormatter.indent.4spaces': '4 spaces',
    'jsonFormatter.indent.tab': 'Tab',
    'jsonFormatter.compress': 'Compress',
    'jsonFormatter.insertSample': 'Insert Sample',
    'jsonFormatter.input.label': 'Enter JSON string',
    'jsonFormatter.input.placeholder': '{"key": "value", "array": [1, 2, 3]}',
    'jsonFormatter.error.title': 'JSON Error',
    'jsonFormatter.validJson': 'Valid JSON',
    'jsonFormatter.output.label': 'Formatted JSON',
    'jsonFormatter.copyResult': 'Copy Result',
    'jsonFormatter.copied': 'Copied',
    'jsonFormatter.reset': 'Reset',
    'jsonFormatter.stats.title': 'JSON Statistics',
    'jsonFormatter.stats.originalSize': 'Original Size',
    'jsonFormatter.stats.formattedSize': 'Formatted Size',
    'jsonFormatter.stats.objects': 'Objects',
    'jsonFormatter.stats.arrays': 'Arrays',
    'jsonFormatter.stats.keys': 'Keys',
    'jsonFormatter.stats.strings': 'Strings',
    'jsonFormatter.stats.numbers': 'Numbers',
    'jsonFormatter.stats.booleans': 'Booleans',
    'jsonFormatter.usage.title': 'How to use',
    'jsonFormatter.usage.step1': 'Paste the JSON string you want to format into the text area above',
    'jsonFormatter.usage.step2': 'Syntax errors are automatically detected and displayed if present',
    'jsonFormatter.usage.step3': 'Change indent size to adjust readability',
    'jsonFormatter.usage.step4': 'Use "Compress" button to create minified format with no spaces or newlines',

    // BaseConverter translations
    'baseConverter.direction.label': 'Conversion Direction',
    'baseConverter.encode': 'Encode',
    'baseConverter.decode': 'Decode',
    'baseConverter.format.label': 'Conversion Format',
    'baseConverter.insertSample': 'Insert Sample',
    'baseConverter.input.originalText': 'Original Text',
    'baseConverter.input.encodedText': '{format} String',
    'baseConverter.input.decodedText': 'Decoded Text',
    'baseConverter.input.placeholder.encode': 'Enter text to encode...',
    'baseConverter.input.placeholder.decode': 'Enter {format} string...',
    'baseConverter.charCount': 'Characters: {count}',
    'baseConverter.byteCount': 'Bytes: {count}',
    'baseConverter.error.title': 'Conversion Error',
    'baseConverter.copyResult': 'Copy Result',
    'baseConverter.copied': 'Copied',
    'baseConverter.swapInputOutput': 'Swap Input/Output',
    'baseConverter.reset': 'Reset',
    'baseConverter.formats.title': 'About Encoding Formats',
    'baseConverter.format.base64.title': 'Base64',
    'baseConverter.format.base64.desc': 'Standard Base64 encoding. Uses 64 characters: A-Z, a-z, 0-9, +, /. Padding with =.',
    'baseConverter.format.base64.example': 'Example: "Hello" → "SGVsbG8="',
    'baseConverter.format.base64url.title': 'Base64URL',
    'baseConverter.format.base64url.desc': 'URL-safe Base64. Replaces + with -, / with _, omits padding =. Used in JWT.',
    'baseConverter.format.base64url.example': 'Example: "Hello" → "SGVsbG8"',
    'baseConverter.format.base58.title': 'Base58',
    'baseConverter.format.base58.desc': 'Used in Bitcoin. Excludes ambiguous characters (0, O, I, l) from 58 characters.',
    'baseConverter.format.base58.example': 'Example: "Hello" → "9Ajdvzr"',
    'baseConverter.usage.title': 'Use Cases',
    'baseConverter.usage.base64': 'Email attachments, data URLs, Basic authentication',
    'baseConverter.usage.base64url': 'JWT, OAuth, URL-safe strings',
    'baseConverter.usage.base58': 'Bitcoin, IPFS, shortened URLs',
    'baseConverter.historyOutput.encode': '{format} encoding completed',
    'baseConverter.historyOutput.decode': '{format} decoding completed',

    // TextConverter translations
    'textConverter.direction.label': 'Conversion Direction',
    'textConverter.halfToFull': 'Half → Full Width',
    'textConverter.fullToHalf': 'Full → Half Width',
    'textConverter.target.label': 'Conversion Target',
    'textConverter.target.all': 'All',
    'textConverter.target.numbers': 'Numbers Only',
    'textConverter.target.alphabet': 'Alphabets Only',
    'textConverter.target.katakana': 'Katakana Only',
    'textConverter.input.label': 'Original Text',
    'textConverter.input.placeholder': 'Enter text to convert...',
    'textConverter.output.label': 'Converted Text',
    'textConverter.copyResult': 'Copy Result',
    'textConverter.copied': 'Copied',
    'textConverter.reset': 'Reset',
    'textConverter.examples.title': 'Conversion Examples',
    'textConverter.examples.numbers': 'Numbers: １２３４５ ⇔ 12345',
    'textConverter.examples.alphabet': 'Alphabets: ＡＢＣＤＥ ⇔ ABCDE',
    'textConverter.examples.katakana': 'Katakana: アイウエオ ⇔ ｱｲｳｴｵ',
    'textConverter.examples.symbols': 'Symbols: （）「」！？ ⇔ ()「」!?',

    // RandomGenerator translations
    'randomGenerator.presets.label': 'Presets',
    'randomGenerator.preset.strong': 'Strong Password',
    'randomGenerator.preset.medium': 'Medium Password',
    'randomGenerator.preset.pin': 'PIN',
    'randomGenerator.preset.token': 'Token',
    'randomGenerator.length.label': 'Length: {length}',
    'randomGenerator.charTypes.label': 'Character Types to Use',
    'randomGenerator.charType.numbers': 'Numbers (0-9)',
    'randomGenerator.charType.uppercase': 'Uppercase (A-Z)',
    'randomGenerator.charType.lowercase': 'Lowercase (a-z)',
    'randomGenerator.charType.symbols': 'Symbols',
    'randomGenerator.excludeOptions.label': 'Exclusion Options',
    'randomGenerator.excludeSimilar': 'Exclude similar characters (il1Lo0O)',
    'randomGenerator.excludeAmbiguous': 'Exclude ambiguous symbols ({}[]() etc)',
    'randomGenerator.generate': 'Generate Random String',
    'randomGenerator.result.label': 'Generated Result',
    'randomGenerator.copy': 'Copy',
    'randomGenerator.copied': 'Copied',
    'randomGenerator.regenerate': 'Regenerate',
    'randomGenerator.history.label': 'Generation History',
    'randomGenerator.usedChars.label': 'Used Characters',
    'randomGenerator.noCharsSelected': 'No character types selected',
    'randomGenerator.error.noChars': 'Error: No available characters selected',
    'randomGenerator.historyInput': 'Length:{length}, Types:{types}',
    'randomGenerator.charTypes.numbers': 'numbers',
    'randomGenerator.charTypes.uppercase': 'uppercase',
    'randomGenerator.charTypes.lowercase': 'lowercase',
    'randomGenerator.charTypes.symbols': 'symbols',

    // UUIDGenerator translations
    'uuidGenerator.version.label': 'UUID Version',
    'uuidGenerator.version.v4': 'UUID v4 (Random)',
    'uuidGenerator.version.v1': 'UUID v1 (Timestamp-based)',
    'uuidGenerator.quantity.label': 'Quantity',
    'uuidGenerator.generate': 'Generate UUID',
    'uuidGenerator.result.label': 'Generated UUIDs',
    'uuidGenerator.copy': 'Copy',
    'uuidGenerator.copyAll': 'Copy All',
    'uuidGenerator.copied': 'Copied!',
    'uuidGenerator.description.v4': 'UUID v4: Uses completely random values',
    'uuidGenerator.description.v1': 'UUID v1: Timestamp-based (simplified implementation)',
    'uuidGenerator.historyOutput.single': '{version}',
    'uuidGenerator.historyOutput.multiple': '{count} UUIDs {version}',
    'uuidGenerator.historyOutput.generated': '{count} generated',

    // HashGenerator translations
    'hashGenerator.inputMethod.label': 'Input Method',
    'hashGenerator.inputMethod.text': 'Text Input',
    'hashGenerator.inputMethod.file': 'File Select',
    'hashGenerator.textInput.label': 'Text to Hash',
    'hashGenerator.textInput.placeholder': 'Enter text to hash...',
    'hashGenerator.fileInput.label': 'File to Hash',
    'hashGenerator.fileName': 'File Name:',
    'hashGenerator.fileSize': 'File Size:',
    'hashGenerator.insertSample': 'Insert Sample',
    'hashGenerator.generating': 'Generating hashes...',
    'hashGenerator.result.title': 'Hash Results',
    'hashGenerator.copyAll': 'Copy All',
    'hashGenerator.copy': 'Copy',
    'hashGenerator.md5.deprecated': 'Deprecated',
    'hashGenerator.sha1.notRecommended': 'Not Recommended',
    'hashGenerator.sha256.recommended': 'Recommended',
    'hashGenerator.md5.warning': 'MD5 is not cryptographically secure. Do not use for security purposes.',
    'hashGenerator.sha1.warning': 'SHA-1 has known vulnerabilities. Use SHA-256 or higher for new systems.',
    'hashGenerator.sha256.info': 'SHA-256 is still considered secure and suitable for security purposes.',
    'hashGenerator.reset': 'Reset',
    'hashGenerator.algorithms.title': 'About Hash Algorithms',
    'hashGenerator.algorithms.md5.title': 'MD5 (Message Digest 5)',
    'hashGenerator.algorithms.md5.desc': '128-bit (32 chars) hash. Fast but not cryptographically secure. Use only for file integrity checks.',
    'hashGenerator.algorithms.sha1.title': 'SHA-1 (Secure Hash Algorithm 1)',
    'hashGenerator.algorithms.sha1.desc': '160-bit (40 chars) hash. Practical attacks discovered in 2017. Not recommended for new use.',
    'hashGenerator.algorithms.sha256.title': 'SHA-256 (SHA-2)',
    'hashGenerator.algorithms.sha256.desc': '256-bit (64 chars) hash. Still considered secure and used in Bitcoin. Recommended choice.',
    'hashGenerator.usage.title': 'Use Cases',
    'hashGenerator.usage.integrity': 'File integrity checking: Verify downloaded files are not corrupted',
    'hashGenerator.usage.password': 'Password storage: Store hash values instead of plain text passwords',
    'hashGenerator.usage.signature': 'Digital signatures: Detect document tampering',
    'hashGenerator.usage.blockchain': 'Blockchain: Used in Bitcoin and other cryptocurrencies',
    'hashGenerator.historyOutput': 'Hash generation completed',

    // YamlJsonConverter translations
    'yamlJsonConverter.inputFormat.label': 'Input Format:',
    'yamlJsonConverter.swapInputOutput': '⇄ Swap Input/Output',
    'yamlJsonConverter.insertYamlSample': 'YAML Sample',
    'yamlJsonConverter.insertJsonSample': 'JSON Sample',
    'yamlJsonConverter.clear': 'Clear',
    'yamlJsonConverter.input.yaml': 'YAML Input',
    'yamlJsonConverter.input.json': 'JSON Input',
    'yamlJsonConverter.input.placeholder.yaml': 'Enter YAML...',
    'yamlJsonConverter.input.placeholder.json': 'Enter JSON...',
    'yamlJsonConverter.error.title': 'Error:',
    'yamlJsonConverter.output.yaml': 'YAML Output',
    'yamlJsonConverter.output.json': 'JSON Output',
    'yamlJsonConverter.execute': 'Execute Conversion',
    'yamlJsonConverter.copy': 'Copy',
    'yamlJsonConverter.copied': 'Copied!',
    'yamlJsonConverter.output.placeholder.yaml': 'Converted YAML will appear here...',
    'yamlJsonConverter.output.placeholder.json': 'Converted JSON will appear here...',
    'yamlJsonConverter.features.title': 'Features:',
    'yamlJsonConverter.features.yamlToJson': 'YAML → JSON: Convert YAML format to JSON format',
    'yamlJsonConverter.features.jsonToYaml': 'JSON → YAML: Convert JSON format to YAML format',
    'yamlJsonConverter.features.realtime': 'Real-time conversion: Automatic conversion during input',
    'yamlJsonConverter.features.swap': 'Input/Output swap: Reuse conversion results as input',
    'yamlJsonConverter.features.errorDetection': 'Error detection: Display detailed syntax errors',
    'yamlJsonConverter.error.empty': 'Input text is empty',
    'yamlJsonConverter.historyOutput.yamlToJson': 'Conversion to JSON completed',
    'yamlJsonConverter.historyOutput.jsonToYaml': 'Conversion to YAML completed',

    // CodeHighlighter translations
    'codeHighlighter.input.label': 'Enter your code',
    'codeHighlighter.input.placeholder': 'Paste your code here...',
    'codeHighlighter.language.label': 'Language Selection',
    'codeHighlighter.language.auto': 'Auto Detect',
    'codeHighlighter.theme.label': 'Theme',
    'codeHighlighter.theme.dark': 'Dark',
    'codeHighlighter.theme.light': 'Light',
    'codeHighlighter.detectedLanguage.label': 'Detected Language',
    'codeHighlighter.detectedLanguage.none': 'Not Detected',
    'codeHighlighter.samples.label': 'Sample Code',
    'codeHighlighter.result.title': 'Highlight Result ({language})',
    'codeHighlighter.copy': 'Copy',
    'codeHighlighter.copied': 'Copied!',
    'codeHighlighter.supportedLanguages': 'Supported languages: Python, Ruby, C/C++, Shell Script, Go, JavaScript, TypeScript, JSON, HTML, CSS',
    'codeHighlighter.autoDetection': 'Auto detection: Analyzes keyword patterns in code to estimate language',
    'codeHighlighter.manualSelection': 'Manual selection: Manually specify language when auto-detection is inaccurate',
    'codeHighlighter.historyOutput': 'Highlight executed',

    // MarkdownConverter translations
    'markdownConverter.mode.label': 'Conversion Mode',
    'markdownConverter.mode.mdToHtml': 'Markdown → HTML',
    'markdownConverter.mode.htmlToMd': 'HTML → Markdown',
    'markdownConverter.input.markdown': 'Markdown Input',
    'markdownConverter.input.html': 'HTML Input',
    'markdownConverter.input.placeholder.markdown': 'Enter Markdown...',
    'markdownConverter.input.placeholder.html': 'Enter HTML...',
    'markdownConverter.insertSample': 'Insert Sample',
    'markdownConverter.execute': 'Execute Conversion',
    'markdownConverter.output.html': 'HTML Output',
    'markdownConverter.output.markdown': 'Markdown Output',
    'markdownConverter.copy': 'Copy',
    'markdownConverter.copied': 'Copied!',
    'markdownConverter.result.code': 'Conversion Result (Code)',
    'markdownConverter.result.preview': 'Preview',
    'markdownConverter.error.enter': 'Please enter content to convert',
    'markdownConverter.error.conversion': 'Error occurred during conversion',
    'markdownConverter.warning.title': 'Note:',
    'markdownConverter.warning.html': 'HTML → Markdown conversion is a simplified implementation, complex HTML may not convert accurately',
    'markdownConverter.warning.sanitize': 'For security, output HTML is automatically sanitized',
    'markdownConverter.historyOutput.mdToHtml': 'Markdown → HTML conversion',
    'markdownConverter.historyOutput.htmlToMd': 'HTML → Markdown conversion',

    // AsciiArtGenerator translations
    'asciiArtGenerator.category.label': 'Category Selection',
    'asciiArtGenerator.category.all': 'All',
    'asciiArtGenerator.category.classic': 'Classic',
    'asciiArtGenerator.category.yaruo': 'Yaruo',
    'asciiArtGenerator.category.giko': 'Giko',
    'asciiArtGenerator.category.oee': 'Oee',
    'asciiArtGenerator.category.maro': 'Maro',
    'asciiArtGenerator.category.other': 'Other Characters',
    'asciiArtGenerator.category.emotion': 'Emotions',
    'asciiArtGenerator.generate': 'Random Generate',
    'asciiArtGenerator.copy': 'Copy',
    'asciiArtGenerator.copied': 'Copied!',
    'asciiArtGenerator.availableCount': 'Available Characters: {count} AAs available',
    'asciiArtGenerator.currentDisplay': 'Currently showing: {character}',
    'asciiArtGenerator.result.title': 'Generated AA',
    'asciiArtGenerator.list.title': 'Character List ({category})',
    'asciiArtGenerator.usage.title': 'How to use:',
    'asciiArtGenerator.usage.random': 'Random generation: Randomly display AA from selected category',
    'asciiArtGenerator.usage.select': 'Individual selection: Click any AA from the character list',
    'asciiArtGenerator.usage.copy': 'Copy: Copy generated AA to clipboard',
    'asciiArtGenerator.usage.category': 'Category: Filter by popular characters like Mona, Yaruo, Giko',
    'asciiArtGenerator.notice': 'Note: AA is provided for educational and cultural purposes as part of 2channel culture.',
    'asciiArtGenerator.historyInput': 'Category: {category}',
    'asciiArtGenerator.historyOutput.random': '{name} randomly generated',
    'asciiArtGenerator.historyOutput.select': '{name} selected',

    // JqExplorer translations
    'jqExplorer.jsonInput.title': 'JSON Input',
    'jqExplorer.insertSample': 'Sample JSON',
    'jqExplorer.clear': 'Clear',
    'jqExplorer.input.placeholder': 'Enter JSON data...',
    'jqExplorer.error.title': 'Error:',
    'jqExplorer.tree.title': 'JSON Tree (Click to generate jq query)',
    'jqExplorer.tree.instruction': '💡 Click any field to automatically generate corresponding jq query',
    'jqExplorer.query.title': 'Generated jq Query',
    'jqExplorer.query.copy': 'Copy Query',
    'jqExplorer.query.copied': 'Copied!',
    'jqExplorer.result.title': 'Execution Result',
    'jqExplorer.usage.title': 'How to use:',
    'jqExplorer.usage.step1': 'Enter JSON to see structured tree display',
    'jqExplorer.usage.step2': 'Click any field to generate jq query that extracts that field',
    'jqExplorer.usage.step3': 'Copy the generated query for use with actual jq command',
    'jqExplorer.usage.step4': 'Query execution results are shown in real-time',
    'jqExplorer.historyInput': 'Path: {path}',
    'jqExplorer.historyOutput': 'jq query executed: {query}',

    // CertificateViewer translations
    'certificateViewer.input.title': 'X.509 Certificate Input',
    'certificateViewer.insertSample': 'Sample Certificate',
    'certificateViewer.copyCert': 'Copy Certificate',
    'certificateViewer.copied': 'Copied!',
    'certificateViewer.clear': 'Clear',
    'certificateViewer.input.placeholder': 'Enter PEM format certificate starting with -----BEGIN CERTIFICATE-----...',
    'certificateViewer.error.title': 'Error:',
    'certificateViewer.expired': '⚠️ This certificate has expired',
    'certificateViewer.expiring': '⚠️ This certificate will expire in {days} days',
    'certificateViewer.valid': '✅ This certificate is valid (expires in {days} days)',
    'certificateViewer.basicInfo.title': 'Basic Information',
    'certificateViewer.version': 'Version',
    'certificateViewer.serialNumber': 'Serial Number',
    'certificateViewer.issuer.title': 'Issuer',
    'certificateViewer.subject.title': 'Subject',
    'certificateViewer.validity.title': 'Validity',
    'certificateViewer.validFrom': 'Valid From',
    'certificateViewer.validTo': 'Valid To',
    'certificateViewer.publicKey.title': 'Public Key',
    'certificateViewer.publicKey.algorithm': 'Algorithm',
    'certificateViewer.publicKey.keySize': 'Key Size',
    'certificateViewer.publicKey.exponent': 'Exponent',
    'certificateViewer.signature.title': 'Signature',
    'certificateViewer.signature.algorithm': 'Signature Algorithm',
    'certificateViewer.signature.hash': 'Hash Function',
    'certificateViewer.extensions.title': 'Extensions',
    'certificateViewer.fingerprint.title': 'Fingerprint',
    'certificateViewer.notice': 'Note: This certificate viewer is for educational and debugging purposes. Use proper verification tools for actual certificate validation.',
    'certificateViewer.historyOutput': 'Certificate information analyzed',

    // ColorPreview translations
    'colorPreview.input.label': 'Enter color code',
    'colorPreview.input.placeholder': '#3b82f6 or rgb(59, 130, 246)',
    'colorPreview.colorPicker': 'Color Picker',
    'colorPreview.error.invalid': 'Please enter a valid color code (#hex, #rgb, rgb(r,g,b))',
    'colorPreview.complementary.title': 'Complementary Color',
    'colorPreview.complementary.copy': 'Copy Complementary',
    'colorPreview.samples.title': 'Sample Colors',
    'colorPreview.insertSample': 'Insert Sample',
    'colorPreview.reset': 'Reset',
    'colorPreview.copy': 'Copy',
    'colorPreview.copied': 'Copied',
    'colorPreview.historyOutput': '{hex} → RGB({r}, {g}, {b})',

    // DateTimeFormatter translations
    'datetimeFormatter.inputFormat.label': 'Input Format',
    'datetimeFormatter.format.unix': 'Unix Time',
    'datetimeFormatter.format.iso': 'ISO8601',
    'datetimeFormatter.format.local': 'Local Time',
    'datetimeFormatter.input.label': 'Enter date/time',
    'datetimeFormatter.supportedFormats': 'Supported formats: {formats}',
    'datetimeFormatter.result.title': 'Conversion Result',
    'datetimeFormatter.unix.title': 'Unix Time (seconds)',
    'datetimeFormatter.unix.milliseconds': 'Milliseconds: {ms}',
    'datetimeFormatter.iso.title': 'ISO8601 (UTC)',
    'datetimeFormatter.local.title': 'Local Time',
    'datetimeFormatter.japan.title': 'Japan Time (JST)',
    'datetimeFormatter.utc.title': 'UTC Time',
    'datetimeFormatter.insertCurrent': 'Insert Current Time',
    'datetimeFormatter.reset': 'Reset',
    'datetimeFormatter.copy': 'Copy',
    'datetimeFormatter.copied': 'Copied',
    'datetimeFormatter.error.invalidUnix': 'Invalid Unix timestamp format',
    'datetimeFormatter.error.invalidISO': 'Invalid ISO8601 format',
    'datetimeFormatter.error.invalidDate': 'Invalid date/time format',
    'datetimeFormatter.error.unknownType': 'Unknown input type',
    'datetimeFormatter.error.invalidDateTime': 'Invalid date/time',
    'datetimeFormatter.error.conversion': 'Conversion error occurred',
    'datetimeFormatter.historyOutput': 'Conversion completed: {iso}',

    // CronParser translations
    'cronParser.input.label': 'Enter Cron Expression',
    'cronParser.input.placeholder': '0 9 * * 1-5',
    'cronParser.format': 'Format: minute(0-59) hour(0-23) day(1-31) month(1-12) weekday(0-7)',
    'cronParser.fields.title': 'Field Analysis',
    'cronParser.schedule.title': 'Execution Schedule',
    'cronParser.nextRuns.title': 'Next Execution Times (Predicted)',
    'cronParser.nextRun': 'Next',
    'cronParser.runCount': '{count}th run',
    'cronParser.samples.title': 'Samples',
    'cronParser.sample.weekdays': 'Weekdays at 9 AM',
    'cronParser.sample.every2hours': 'Every 2 hours',
    'cronParser.sample.monthly': '1st day of month at 1:30 AM',
    'cronParser.sample.sunday': 'Every Sunday at midnight',
    'cronParser.sample.every15min': 'Every 15 minutes',
    'cronParser.reset': 'Reset',
    'cronParser.copy': 'Copy',
    'cronParser.copied': 'Copied',
    'cronParser.error.invalidFormat': 'Cron expression must have 5 fields (minute hour day month weekday)',
    'cronParser.error.parseFailed': 'Failed to parse cron expression',
    'cronParser.field.minute': 'Minute',
    'cronParser.field.hour': 'Hour',
    'cronParser.field.day': 'Day',
    'cronParser.field.month': 'Month',
    'cronParser.field.weekday': 'Weekday',
    'cronParser.historyOutput': 'Cron expression analysis completed',
    'cronParser.desc.everyMinute': 'Every minute',
    'cronParser.desc.everyHour': 'Every hour',
    'cronParser.desc.everyDay': 'Every day',
    'cronParser.desc.everyMonth': 'Every month',
    'cronParser.desc.every': 'Every time',
    'cronParser.desc.from': 'from',
    'cronParser.desc.intervalMinute': 'minute intervals',
    'cronParser.desc.intervalHour': 'hour intervals',
    'cronParser.desc.intervalDay': 'day intervals',
    'cronParser.desc.intervalMonth': 'month intervals',
    'cronParser.desc.intervalWeekday': 'day intervals (weekday)',
    'cronParser.desc.interval': 'intervals',
    'cronParser.desc.minute': 'minute',
    'cronParser.desc.hour': 'hour',
    'cronParser.desc.execute': 'execute',
    'cronParser.desc.executeOn': 'execute at {time} on {day}',
    'cronParser.desc.executeDaily': 'execute daily at {time}',
    'cronParser.desc.executeMonthly': 'execute on {day} of every month at {time}',
    'cronParser.desc.or': 'or',
    'cronParser.dayName.0': 'Sun',
    'cronParser.dayName.1': 'Mon',
    'cronParser.dayName.2': 'Tue',
    'cronParser.dayName.3': 'Wed',
    'cronParser.dayName.4': 'Thu',
    'cronParser.dayName.5': 'Fri',
    'cronParser.dayName.6': 'Sat',
    'cronParser.monthName.1': 'Jan',
    'cronParser.monthName.2': 'Feb',
    'cronParser.monthName.3': 'Mar',
    'cronParser.monthName.4': 'Apr',
    'cronParser.monthName.5': 'May',
    'cronParser.monthName.6': 'Jun',
    'cronParser.monthName.7': 'Jul',
    'cronParser.monthName.8': 'Aug',
    'cronParser.monthName.9': 'Sep',
    'cronParser.monthName.10': 'Oct',
    'cronParser.monthName.11': 'Nov',
    'cronParser.monthName.12': 'Dec',

    // HtmlEscaper translations
    'htmlEscaper.mode.label': 'Processing Mode',
    'htmlEscaper.mode.escape': 'Escape',
    'htmlEscaper.mode.unescape': 'Unescape',
    'htmlEscaper.mode.description.escape': 'Convert HTML special characters to entities',
    'htmlEscaper.mode.description.unescape': 'Convert HTML entities back to original characters',
    'htmlEscaper.input.escape': 'Text to Escape',
    'htmlEscaper.input.unescape': 'HTML Entities to Unescape',
    'htmlEscaper.input.placeholder.escape': '<div class="example">HTML & special chars</div>',
    'htmlEscaper.input.placeholder.unescape': '&lt;div class=&quot;example&quot;&gt;HTML &amp; special chars&lt;/div&gt;',
    'htmlEscaper.stats.title': 'Statistics',
    'htmlEscaper.stats.inputLength': 'Input Length',
    'htmlEscaper.stats.outputLength': 'Output Length',
    'htmlEscaper.stats.difference': 'Difference',
    'htmlEscaper.stats.escapedChars': 'Escaped Characters',
    'htmlEscaper.stats.specialChars': 'Special Characters',
    'htmlEscaper.output.escape': 'Escape Result',
    'htmlEscaper.output.unescape': 'Unescape Result',
    'htmlEscaper.swapInputOutput': 'Swap Input/Output',
    'htmlEscaper.copy': 'Copy',
    'htmlEscaper.copied': 'Copied',
    'htmlEscaper.entities.title': 'Common HTML Entities',
    'htmlEscaper.insertSample': 'Insert Sample',
    'htmlEscaper.reset': 'Reset',
    'htmlEscaper.error.conversion': 'Conversion error occurred',
    'htmlEscaper.historyOutput.escape': 'HTML escape completed',
    'htmlEscaper.historyOutput.unescape': 'HTML unescape completed',

    // CharacterCount translations

    // JSONFormatter translations
    'jsonFormatter.settings.indent': 'Indent',
    'jsonFormatter.settings.twoSpaces': '2 spaces',
    'jsonFormatter.settings.fourSpaces': '4 spaces',
    'jsonFormatter.settings.tab': 'Tab',
    'jsonFormatter.button.compress': 'Compress',
    'jsonFormatter.button.insertSample': 'Insert sample',
    'jsonFormatter.button.copyResult': 'Copy result',
    'jsonFormatter.button.reset': 'Reset',
    'jsonFormatter.success': 'Valid JSON',

    // BaseConverter translations
    'baseConverter.mode.encode': 'Encode',
    'baseConverter.mode.decode': 'Decode',
    'baseConverter.format.base64': 'Base64',
    'baseConverter.format.base64url': 'Base64URL',
    'baseConverter.format.base58': 'Base58',
    'baseConverter.button.insertSample': 'Insert sample',
    'baseConverter.input.placeholderEncode': 'Enter text to encode...',
    'baseConverter.input.placeholderDecode': 'Enter {format} string...',
    'baseConverter.stats.chars': 'Characters',
    'baseConverter.stats.bytes': 'Bytes',
    'baseConverter.button.copyResult': 'Copy result',
    'baseConverter.button.swap': 'Swap input/output',
    'baseConverter.button.reset': 'Reset',
    'baseConverter.format.description.title': 'About encoding formats',
    'baseConverter.format.base64.description': 'Standard Base64 encoding using A-Z, a-z, 0-9, +, / characters with = padding.',
    'baseConverter.format.base64url.description': 'URL-safe Base64 variant replacing + with -, / with _, and omitting = padding. Used in JWT.',
    'baseConverter.format.base58.description': 'Used in Bitcoin. Uses 58 characters excluding confusing ones (0, O, I, l).',

    // TextConverter translations
    'textConverter.direction.halfToFull': 'Half-width → Full-width',
    'textConverter.direction.fullToHalf': 'Full-width → Half-width',
    'textConverter.button.copyResult': 'Copy result',
    'textConverter.button.reset': 'Reset',

    // RandomGenerator translations
    'randomGenerator.preset.strongPassword': 'Strong Password',
    'randomGenerator.preset.mediumPassword': 'Medium Password',
    'randomGenerator.exclude.label': 'Exclude options',
    'randomGenerator.exclude.similar': 'Exclude similar characters (il1Lo0O)',
    'randomGenerator.exclude.ambiguous': 'Exclude ambiguous symbols ({}[]() etc)',
    'randomGenerator.button.generate': 'Generate random string',
    'randomGenerator.button.regenerate': 'Regenerate',
    'randomGenerator.charPreview.label': 'Available characters',
    'randomGenerator.charPreview.numbers': 'Numbers',
    'randomGenerator.charPreview.uppercase': 'Uppercase',
    'randomGenerator.charPreview.lowercase': 'Lowercase',
    'randomGenerator.charPreview.symbols': 'Symbols',
    'randomGenerator.charPreview.noSelection': 'No character types selected',
    'randomGenerator.button.copy': 'Copy',
    'randomGenerator.historyInput.length': 'Length: {length}, Types: {types}',
    'randomGenerator.historyInput.types.numbers': 'Numbers',
    'randomGenerator.historyInput.types.uppercase': 'Uppercase',
    'randomGenerator.historyInput.types.lowercase': 'Lowercase',
    'randomGenerator.historyInput.types.symbols': 'Symbols',

    // UUIDGenerator translations
    'uuidGenerator.button.generate': 'Generate UUID',
    'uuidGenerator.result.title': 'Generated UUIDs',
    'uuidGenerator.button.copyAll': 'Copy all',
    'uuidGenerator.button.copy': 'Copy',

    // HashGenerator translations
    'hashGenerator.mode.label': 'Input method',
    'hashGenerator.mode.text': 'Text input',
    'hashGenerator.mode.file': 'File selection',
    'hashGenerator.input.text.label': 'Text to hash',
    'hashGenerator.input.text.placeholder': 'Enter text to hash...',
    'hashGenerator.input.file.label': 'File to hash',
    'hashGenerator.button.insertSample': 'Insert sample',
    'hashGenerator.fileInfo.name': 'File name',
    'hashGenerator.fileInfo.size': 'File size',
    'hashGenerator.stats.chars': 'Characters',
    'hashGenerator.stats.bytes': 'Bytes',
    'hashGenerator.loading': 'Generating hashes...',
    'hashGenerator.button.copyAll': 'Copy all',
    'hashGenerator.button.reset': 'Reset',
    'hashGenerator.algorithm.md5': 'MD5',
    'hashGenerator.algorithm.sha1': 'SHA-1',
    'hashGenerator.algorithm.sha256': 'SHA-256',
    'hashGenerator.status.deprecated': 'Deprecated',
    'hashGenerator.status.notRecommended': 'Not recommended',
    'hashGenerator.status.recommended': 'Recommended',
    'hashGenerator.warning.md5': 'MD5 is not cryptographically secure. Do not use for security purposes.',
    'hashGenerator.warning.sha1': 'SHA-1 has known vulnerabilities. Use SHA-256 or higher for new systems.',
    'hashGenerator.info.sha256': 'SHA-256 is still considered secure and suitable for security applications.',
    'hashGenerator.about.title': 'About hash algorithms',
    'hashGenerator.about.md5.title': 'MD5 (Message Digest 5)',
    'hashGenerator.about.md5.description': '128-bit (32-digit) hash value. Fast but not cryptographically secure. Use only for file integrity checks.',
    'hashGenerator.about.sha1.title': 'SHA-1 (Secure Hash Algorithm 1)',
    'hashGenerator.about.sha1.description': '160-bit (40-digit) hash value. Practical attacks were discovered in 2017, now deprecated.',
    'hashGenerator.about.sha256.title': 'SHA-256 (SHA-2)',
    'hashGenerator.about.sha256.description': '256-bit (64-digit) hash value. Still considered secure, used in Bitcoin and other applications.',

    // YamlJsonConverter translations
    'yamlJsonConverter.inputFormat.yaml': 'YAML',
    'yamlJsonConverter.inputFormat.json': 'JSON',
    'yamlJsonConverter.button.swap': '⇄ Swap input/output',
    'yamlJsonConverter.button.yamlSample': 'YAML sample',
    'yamlJsonConverter.button.jsonSample': 'JSON sample',
    'yamlJsonConverter.button.clear': 'Clear',
    'yamlJsonConverter.input.label': '{format} input',
    'yamlJsonConverter.input.placeholder': 'Enter {format}...',
    'yamlJsonConverter.output.label': '{format} output',
    'yamlJsonConverter.output.placeholder': 'Converted {format} will appear here...',
    'yamlJsonConverter.button.convert': 'Convert',
    'yamlJsonConverter.button.copy': 'Copy',
    'yamlJsonConverter.error.failed': 'Conversion failed',
    'yamlJsonConverter.historyOutput.yaml': 'YAML text',
    'yamlJsonConverter.historyOutput.json': 'JSON text',

    // Common
    'common.back': 'Back',
    'common.copy': 'Copy',
    'common.copied': 'Copied'
  }
};

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>('ja');

  const t = (key: string): string => {
    return translations[language][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}